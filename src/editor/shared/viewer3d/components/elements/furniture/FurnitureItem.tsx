import React, { useEffect } from 'react';
import { Box, Edges, Html } from '@react-three/drei';
import { ThreeEvent, useThree } from '@react-three/fiber';
import { getModuleById } from '@/data/modules';
import { calculateInternalSpace } from '../../../utils/geometry';
import { SpaceInfo } from '@/store/core/spaceConfigStore';
import { PlacedModule } from '@/editor/shared/furniture/types';
import BoxModule from '../../modules/BoxModule';
import * as THREE from 'three';
import { analyzeColumnSlots, calculateFurnitureWidthWithColumn, convertDualToSingleIfNeeded, calculateFurnitureBounds, calculateOptimalHingePosition } from '@/editor/shared/utils/columnSlotProcessor';
import { calculateSpaceIndexing, ColumnIndexer } from '@/editor/shared/utils/indexing';
import DoorModule from '../../modules/DoorModule';
import { useUIStore } from '@/store/uiStore';
import { EditIcon } from '@/components/common/Icons';
import { getEdgeColor } from '../../../utils/edgeColorUtils';
import { useColumnCResize } from '@/editor/shared/furniture/hooks/useColumnCResize';
import { useFurnitureStore } from '@/store/core/furnitureStore';
import EndPanelWithTexture from '../../modules/components/EndPanelWithTexture';
import { useTheme } from '@/contexts/ThemeContext';

// ÏóîÎìúÌå®ÎÑê ÎëêÍªò ÏÉÅÏàò
const END_PANEL_THICKNESS = 18; // mm

// ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•Í≥º ÌÇ§ÌÅ∞Ïû•(ÎìÄÏñº Ìè¨Ìï®)Ïùò Ïù∏Ï†ë ÌåêÎã® Ìï®Ïàò
const checkAdjacentUpperLowerToFull = (
  currentModule: PlacedModule,
  allModules: PlacedModule[],
  spaceInfo: SpaceInfo
): { hasAdjacentUpperLower: boolean; adjacentSide: 'left' | 'right' | 'both' | null } => {
  // ÌòÑÏû¨ Í∞ÄÍµ¨Í∞Ä ÌÇ§ÌÅ∞Ïû•(full) ÎòêÎäî ÎìÄÏñº Ï∫êÎπÑÎÑ∑Ïù∏ÏßÄ ÌôïÏù∏
  const currentModuleData = getModuleById(currentModule.moduleId, calculateInternalSpace(spaceInfo), spaceInfo);
  if (!currentModuleData) {
    return { hasAdjacentUpperLower: false, adjacentSide: null };
  }
  
  // ÌÇ§ÌÅ∞Ïû•(full)Ïù¥ ÏïÑÎãàÎ©¥ Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
  // ÎìÄÏñº Ï∫êÎπÑÎÑ∑Ïù¥Ïñ¥ÎèÑ ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•Ïù¥Î©¥ ÏóîÎìúÌå®ÎÑê Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå
  const isDualCabinet = currentModule.moduleId?.includes('dual-');
  
  // ÌÇ§ÌÅ∞Ïû•(full Ïπ¥ÌÖåÍ≥†Î¶¨)Îßå Ï≤òÎ¶¨
  // ÎìÄÏñº ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•ÏùÄ Ï≤òÎ¶¨ÌïòÏßÄ ÏïäÏùå (Í∞ôÏùÄ Ïπ¥ÌÖåÍ≥†Î¶¨ÎÅºÎ¶¨Îäî ÏóîÎìúÌå®ÎÑê Î∂àÌïÑÏöî)
  if (currentModuleData.category !== 'full') {
    return { hasAdjacentUpperLower: false, adjacentSide: null };
  }

  // ÌòÑÏû¨ Í∞ÄÍµ¨Ïùò Ïä¨Î°Ø Ïù∏Îç±Ïä§
  const currentSlotIndex = currentModule.slotIndex;
  if (currentSlotIndex === undefined) {
    return { hasAdjacentUpperLower: false, adjacentSide: null };
  }

  // ÎìÄÏñº Ï∫êÎπÑÎÑ∑Ïùò Í≤ΩÏö∞ Îëê Í∞úÏùò Ïä¨Î°ØÏùÑ Ï∞®ÏßÄ
  const isCurrentDual = isDualCabinet || currentModule.isDualSlot;
  
  // Îã®ÎÇ¥Î¶ºÏù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞, ÌòÑÏû¨ Î™®ÎìàÏùò zone ÏÇ¨Ïö©
  let currentZone: 'normal' | 'dropped' | undefined = currentModule.zone;
  if (spaceInfo.droppedCeiling?.enabled && currentZone) {
    }
  
  // Ïù∏Ï†ëÌïú Ïä¨Î°ØÏóê ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•Ïù¥ ÏûàÎäîÏßÄ ÌôïÏù∏
  // ÏôºÏ™Ω: Ïã±Í∏Ä Í∞ÄÍµ¨Îäî -1, ÎìÄÏñº Í∞ÄÍµ¨Îäî ÏãúÏûë Ïä¨Î°ØÏù¥ -2 ÏúÑÏπòÏóê ÏûàÏñ¥Ïïº Ìï®
  let leftAdjacentModule = allModules.find(m => {
    // ÏôºÏ™ΩÏóê ÏûàÎäî Í∞ÄÍµ¨Í∞Ä ÎìÄÏñºÏù∏ Í≤ΩÏö∞ Ï≤òÎ¶¨
    const isLeftDual = m.moduleId?.includes('dual-');
    if (isLeftDual) {
      // ÎìÄÏñº Í∞ÄÍµ¨Ïùò ÏãúÏûë Ïä¨Î°ØÏù¥ currentSlotIndex - 2 ÏúÑÏπòÏóê ÏûàÍ≥†,
      // ÎìÄÏñºÏù¥ Ï∞®ÏßÄÌïòÎäî Îëê Î≤àÏß∏ Ïä¨Î°Ø(+1)Ïù¥ ÌòÑÏû¨ Í∞ÄÍµ¨ Î∞îÎ°ú ÏôºÏ™Ω(currentSlotIndex - 1)Ïóê ÏûàÎäîÏßÄ ÌôïÏù∏
      const isAdjacent = m.slotIndex === currentSlotIndex - 2;
      if (isAdjacent) {
        }
      return isAdjacent;
    } else {
      // Ïã±Í∏Ä Í∞ÄÍµ¨Îäî Î∞îÎ°ú ÏôºÏ™Ω Ïä¨Î°ØÏóê ÏûàÏñ¥Ïïº Ìï®
      const isAdjacent = m.slotIndex === currentSlotIndex - 1;
      if (isAdjacent) {
        }
      return isAdjacent;
    }
  });
  
  // Ïò§Î•∏Ï™Ω: ÌòÑÏû¨ Í∞ÄÍµ¨Í∞Ä ÎìÄÏñºÏù¥Î©¥ +2, Ïã±Í∏ÄÏù¥Î©¥ +1 ÏúÑÏπò Ï≤¥ÌÅ¨
  let rightAdjacentModule = isCurrentDual 
    ? allModules.find(m => m.slotIndex === currentSlotIndex + 2)  // ÎìÄÏñºÏùÄ +2
    : allModules.find(m => m.slotIndex === currentSlotIndex + 1); // Ïã±Í∏ÄÏùÄ +1
  
  // Îã®ÎÇ¥Î¶ºÏù¥ ÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞, Ïù∏Ï†ë Î™®ÎìàÏù¥ Í∞ôÏùÄ zoneÏóê ÏûàÎäîÏßÄ ÌôïÏù∏
  if (currentZone && spaceInfo.droppedCeiling?.enabled) {
    // ÏôºÏ™Ω Ïù∏Ï†ë Î™®ÎìàÏù¥ Îã§Î•∏ zoneÏóê ÏûàÏúºÎ©¥ Î¨¥Ïãú
    if (leftAdjacentModule) {
      const leftZone = leftAdjacentModule.zone;
      if (leftZone !== currentZone) {
        leftAdjacentModule = undefined;
      }
    }
    
    // Ïò§Î•∏Ï™Ω Ïù∏Ï†ë Î™®ÎìàÏù¥ Îã§Î•∏ zoneÏóê ÏûàÏúºÎ©¥ Î¨¥Ïãú
    if (rightAdjacentModule) {
      const rightZone = rightAdjacentModule.zone;
      if (rightZone !== currentZone) {
        rightAdjacentModule = undefined;
      }
    }
  }
  
  // ÏôºÏ™Ω Ïù∏Ï†ë Î™®ÎìàÏù¥ ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•Ïù∏ÏßÄ ÌôïÏù∏
  let hasLeftAdjacent = false;
  if (leftAdjacentModule) {
    // ÏÉÅÌïòÎ∂ÄÏû• ÌåêÎã®ÏùÑ Î™®Îìà IDÎ°ú ÏßÅÏ†ë ÏàòÌñâ (Îçî ÏïàÏ†ïÏ†Å)
    const isLeftUpperCabinet = leftAdjacentModule.moduleId?.includes('upper-cabinet');
    const isLeftLowerCabinet = leftAdjacentModule.moduleId?.includes('lower-cabinet');
    const isLeftUpperLower = isLeftUpperCabinet || isLeftLowerCabinet;
    
    if (isLeftUpperLower) {
      hasLeftAdjacent = true;
    }
  }
  
  // Ïò§Î•∏Ï™Ω Ïù∏Ï†ë Î™®ÎìàÏù¥ ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•Ïù∏ÏßÄ ÌôïÏù∏
  let hasRightAdjacent = false;
  if (rightAdjacentModule) {
    // ÏÉÅÌïòÎ∂ÄÏû• ÌåêÎã®ÏùÑ Î™®Îìà IDÎ°ú ÏßÅÏ†ë ÏàòÌñâ (Îçî ÏïàÏ†ïÏ†Å)
    const isRightUpperCabinet = rightAdjacentModule.moduleId?.includes('upper-cabinet');
    const isRightLowerCabinet = rightAdjacentModule.moduleId?.includes('lower-cabinet');
    const isRightUpperLower = isRightUpperCabinet || isRightLowerCabinet;
    
    if (isRightUpperLower) {
      hasRightAdjacent = true;
    }
  }

  // Í≤∞Í≥º Î∞òÌôò
  const result = (() => {
    if (hasLeftAdjacent && hasRightAdjacent) {
      return { hasAdjacentUpperLower: true, adjacentSide: 'both' as const };
    } else if (hasLeftAdjacent) {
      return { hasAdjacentUpperLower: true, adjacentSide: 'left' as const };
    } else if (hasRightAdjacent) {
      return { hasAdjacentUpperLower: true, adjacentSide: 'right' as const };
    }
    return { hasAdjacentUpperLower: false, adjacentSide: null };
  })();

  // ÎìÄÏñº Í∞ÄÍµ¨Ïùº ÎïåÎßå ÎîîÎ≤ÑÍ∑∏ Î°úÍ∑∏
  if (isCurrentDual) {
    }

  return result;
};

interface FurnitureItemProps {
  placedModule: PlacedModule;
  placedModules: PlacedModule[]; // Ï∂îÍ∞Ä
  spaceInfo: SpaceInfo;
  furnitureStartY: number;
  isDragMode: boolean;
  isEditMode: boolean;
  isDraggingThis: boolean;
  viewMode: '2D' | '3D';
  view2DDirection?: 'front' | 'left' | 'right' | 'top' | 'all';
  renderMode: 'solid' | 'wireframe';
  showFurniture?: boolean; // Í∞ÄÍµ¨ Î≥∏Ï≤¥ ÌëúÏãú Ïó¨Î∂Ä
  onPointerDown: (e: ThreeEvent<PointerEvent>, id: string) => void;
  onPointerMove: (e: ThreeEvent<PointerEvent>) => void;
  onPointerUp: () => void;
  onDoubleClick: (e: ThreeEvent<MouseEvent>, id: string) => void;
}

const FurnitureItem: React.FC<FurnitureItemProps> = ({
  placedModule,
  placedModules,
  spaceInfo,
  furnitureStartY,
  isDragMode,
  isEditMode,
  isDraggingThis,
  viewMode,
  view2DDirection,
  renderMode,
  showFurniture = true,
  onPointerDown,
  onPointerMove,
  onPointerUp,
  onDoubleClick
}) => {
  // Three.js Ïª®ÌÖçÏä§Ìä∏ Ï†ëÍ∑º
  const { gl, invalidate, scene, camera } = useThree();

  // ÎîîÎ≤ÑÍ∑∏: showFurniture Í∞í ÌôïÏù∏
  useEffect(() => {
    console.log('üéØ FurnitureItem - showFurniture:', showFurniture, 'placedModuleId:', placedModule.id, 'moduleId:', placedModule.moduleId);
  }, [showFurniture, placedModule.id, placedModule.moduleId]);
  const { isFurnitureDragging, showDimensions, view2DTheme, selectedFurnitureId, selectedSlotIndex } = useUIStore();
  const { updatePlacedModule } = useFurnitureStore();
  const [isHovered, setIsHovered] = React.useState(false);
  const isSelected = viewMode === '3D' && selectedFurnitureId === placedModule.id;
  const { theme: appTheme } = useTheme();
  
  // ÌÖåÎßà ÏÉâÏÉÅ Îß§Ìïë
  const themeColorMap: Record<string, string> = {
    green: '#10b981',
    blue: '#3b82f6',
    purple: '#8b5cf6',
    vivid: '#a25378',
    red: '#D2042D',
    pink: '#ec4899',
    indigo: '#6366f1',
    teal: '#14b8a6',
    yellow: '#eab308',
    gray: '#6b7280',
    cyan: '#06b6d4',
    lime: '#84cc16',
    black: '#1a1a1a',
    wine: '#845EC2',
    gold: '#d97706',
    navy: '#1e3a8a',
    emerald: '#059669',
    violet: '#C128D7',
    mint: '#0CBA80',
    neon: '#18CF23',
    rust: '#FF7438',
    white: '#D65DB1',
    plum: '#790963',
    brown: '#5A2B1D',
    darkgray: '#2C3844',
    maroon: '#3F0D0D',
    turquoise: '#003A7A',
    slate: '#2E3A47',
    copper: '#AD4F34',
    forest: '#1B3924',
    olive: '#4C462C'
  };
  
  const selectionHighlightColor = themeColorMap[appTheme.color] || '#3b82f6';
  const highlightPadding = 0.02; // ‚âí2mm Ï∂îÍ∞Ä Ïó¨Ïú†
  const highlightMeshRef = React.useRef<THREE.Mesh>(null);
  
  // Î†åÎçîÎßÅ Ï∂îÏ†Å Î∞è ÌÅ¥Î¶∞ÏóÖ
  React.useEffect(() => {
    // ÎßàÏö¥Ìä∏/Ïñ∏ÎßàÏö¥Ìä∏ Î°úÍ∑∏ Ï†úÍ±∞ (ÏÑ±Îä• ÏµúÏ†ÅÌôî)
    return () => {
      // Î¨¥Í±∞Ïö¥ ÌÅ¥Î¶∞ÏóÖ Ï†úÍ±∞ - React Three FiberÍ∞Ä ÏûêÎèôÏúºÎ°ú Ï≤òÎ¶¨
    };
  }, [placedModule.id]);

  React.useEffect(() => {
    if (!isSelected) return;
    if (!highlightMeshRef.current) return;
    // Í∞ïÏ°∞Ïö© Î≥¥Ï°∞ Î©îÏâ¨Îäî ÏûÖÎ†• Ïù¥Î≤§Ìä∏ÏóêÏÑú Ï†úÏô∏ÌïúÎã§.
    highlightMeshRef.current.raycast = () => null;
    highlightMeshRef.current.traverse(child => {
      child.raycast = () => null;
    });
  }, [isSelected]);

  // ÏÑπÏÖò ÍπäÏù¥ Î≥ÄÍ≤Ω Ï∂îÏ†Å
  React.useEffect(() => {
    console.log('üîç FurnitureItem - placedModule ÏÑπÏÖò ÍπäÏù¥ Î≥ÄÍ≤Ω:', {
      id: placedModule.id,
      moduleId: placedModule.moduleId,
      lowerSectionDepth: placedModule.lowerSectionDepth,
      upperSectionDepth: placedModule.upperSectionDepth
    });
  }, [placedModule.lowerSectionDepth, placedModule.upperSectionDepth, placedModule.id, placedModule.moduleId]);
  
  // ÌÖåÎßà ÏÉâÏÉÅ Í∞ÄÏ†∏Ïò§Í∏∞
  const getThemeColor = () => {
    const computedStyle = getComputedStyle(document.documentElement);
    return computedStyle.getPropertyValue('--theme-primary').trim() || '#10b981';
  };
  
  // ÎÇ¥Í≤Ω Í≥µÍ∞Ñ Í≥ÑÏÇ∞ - zone Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ zoneÎ≥Ñ Í≥ÑÏÇ∞
  let internalSpace = calculateInternalSpace(spaceInfo);
  let zoneSpaceInfo = spaceInfo;
  
  // Îã®ÎÇ¥Î¶ºÏù¥ ÌôúÏÑ±ÌôîÎêòÍ≥† zone Ï†ïÎ≥¥Í∞Ä ÏûàÎäî Í≤ΩÏö∞ ÏòÅÏó≠Î≥Ñ Ï≤òÎ¶¨
  // ÎÜíÏù¥Îäî Ìï≠ÏÉÅ Ïû¨Í≥ÑÏÇ∞Ìï¥Ïïº ÌïòÎØÄÎ°ú Ï°∞Í±¥ Ï†úÍ±∞
  if (spaceInfo.droppedCeiling?.enabled && placedModule.zone) {
    const zoneInfo = ColumnIndexer.calculateZoneSlotInfo(spaceInfo, spaceInfo.customColumnCount);
    const targetZone = placedModule.zone === 'dropped' && zoneInfo.dropped ? zoneInfo.dropped : zoneInfo.normal;
    
    // Îã®ÎÇ¥Î¶º ÏòÅÏó≠Î≥Ñ Ïô∏Í≤Ω ÎÑàÎπÑ Í≥ÑÏÇ∞ (ÌîÑÎ†àÏûÑ Ìè¨Ìï®)
    const droppedCeilingWidth = spaceInfo.droppedCeiling?.width || 900;
    let zoneOuterWidth: number;
    
    if (placedModule.zone === 'dropped') {
      // Îã®ÎÇ¥Î¶º ÏòÅÏó≠Ïùò Ïô∏Í≤Ω ÎÑàÎπÑ
      zoneOuterWidth = droppedCeilingWidth;
    } else {
      // Î©îÏù∏ ÏòÅÏó≠Ïùò Ïô∏Í≤Ω ÎÑàÎπÑ
      zoneOuterWidth = spaceInfo.width - droppedCeilingWidth;
    }
    
    // ÏòÅÏó≠Î≥Ñ spaceInfo ÏÉùÏÑ±
    zoneSpaceInfo = {
      ...spaceInfo,
      width: zoneOuterWidth,  // zoneÏùò Ïô∏Í≤Ω ÎÑàÎπÑ
      zone: placedModule.zone  // zone Ï†ïÎ≥¥ Ï∂îÍ∞Ä
    };
    
    internalSpace = calculateInternalSpace(zoneSpaceInfo);
    internalSpace.startX = targetZone.startX;
    
    // calculateInternalSpaceÏóêÏÑú Ïù¥ÎØ∏ zone === 'dropped'Ïùº Îïå ÎÜíÏù¥Î•º Ï°∞Ï†ïÌïòÎØÄÎ°ú
    // Ïó¨Í∏∞ÏÑúÎäî Ï∂îÍ∞Ä Ï°∞Ï†ïÌïòÏßÄ ÏïäÏùå
    if (placedModule.zone === 'dropped') {
      }
  }
  
  // Î™®Îìà Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ - zoneÎ≥Ñ spaceInfo ÏÇ¨Ïö©
  // Í∞ÄÍµ¨ ÏúÑÏπò Î≥ÄÍ≤Ω Ïãú Î†åÎçîÎßÅ ÏóÖÎç∞Ïù¥Ìä∏ Î∞è Í∑∏Î¶ºÏûê ÏóÖÎç∞Ïù¥Ìä∏
  // HookÏùÄ Ï°∞Í±¥Î∂Ä return Ï†ÑÏóê ÏÑ†Ïñ∏ÎêòÏñ¥Ïïº Ìï®
  useEffect(() => {
    invalidate();
    
    // 3D Î™®ÎìúÏóêÏÑú Í∑∏Î¶ºÏûê Í∞ïÏ†ú ÏóÖÎç∞Ïù¥Ìä∏
    if (gl && gl.shadowMap) {
      gl.shadowMap.needsUpdate = true;
      
      // Î©îÏâ¨ Î†åÎçîÎßÅ ÏôÑÎ£å Î≥¥Ïû•ÏùÑ ÏúÑÌïú ÏßÄÏó∞ ÏóÖÎç∞Ïù¥Ìä∏
      setTimeout(() => {
        gl.shadowMap.needsUpdate = true;
        invalidate();
      }, 100);
      
      // Ï∂îÍ∞ÄÎ°ú 300ms ÌõÑÏóêÎèÑ Ìïú Î≤à Îçî (ÏôÑÏ†ÑÌïú Î†åÎçîÎßÅ Î≥¥Ïû•)
      setTimeout(() => {
        gl.shadowMap.needsUpdate = true;
        invalidate();
      }, 300);
    }
  }, [placedModule.position.x, placedModule.position.y, placedModule.position.z, placedModule.id, invalidate, gl]);

  // mmÎ•º Three.js Îã®ÏúÑÎ°ú Î≥ÄÌôò
  const mmToThreeUnits = (mm: number) => mm * 0.01;

  // Í∏∞Îë• Ìè¨Ìï® Ïä¨Î°Ø Î∂ÑÏÑù (Í∏∞Îë• Î≥ÄÍ≤ΩÏÇ¨Ìï≠ Ïã§ÏãúÍ∞Ñ Î∞òÏòÅ)
  // HookÏùÄ Ï°∞Í±¥Î∂Ä return Ï†ÑÏóê ÏÑ†Ïñ∏ÎêòÏñ¥Ïïº Ìï®
  const columnSlots = React.useMemo(() => {
    return analyzeColumnSlots(spaceInfo, placedModules);
  }, [spaceInfo, spaceInfo.columns, placedModule.id, placedModule.slotIndex, placedModules]);

  // Column C ÌÅ¨Í∏∞ Ï°∞Ï†à ÌõÖ - Î™®Îì† HookÏùÄ Ï°∞Í±¥Î∂Ä return Ï†ÑÏóê Ìò∏Ï∂úÎêòÏñ¥Ïïº Ìï®
  // Ïã§Ï†ú Í∞íÏùÄ ÎÇòÏ§ëÏóê Í≥ÑÏÇ∞ÎêòÎØÄÎ°ú Ïó¨Í∏∞ÏÑúÎäî Í∏∞Î≥∏Í∞íÏúºÎ°ú Ìò∏Ï∂ú
  const [columnCParams, setColumnCParams] = React.useState({
    isEnabled: false,
    depth: 300,
    width: 600
  });
  
  const columnCResize = useColumnCResize(
    placedModule,
    columnCParams.isEnabled,
    columnCParams.depth,
    columnCParams.width
  );

  // ÏúÑÏπò Î≥ÄÍ≤Ω Î°úÍπÖÏö© useEffect - early return Ï†ÑÏóê ÏÑ†Ïñ∏
  const [positionLogData, setPositionLogData] = React.useState<any>(null);
  
  useEffect(() => {
    if (positionLogData) {
      }
  }, [positionLogData]);

  // Column C ÌååÎùºÎØ∏ÌÑ∞ ÏóÖÎç∞Ïù¥Ìä∏Î•º ÏúÑÌïú ÏÉÅÌÉúÏôÄ useEffect
  const [columnCState, setColumnCState] = React.useState<{
    isEnabled: boolean;
    depth: number;
    width: number;
  } | null>(null);
  
  React.useEffect(() => {
    if (columnCState) {
      setColumnCParams(columnCState);
    }
  }, [columnCState]);
  
  // ÏúÑÏπò Î°úÍπÖÏùÑ ÏúÑÌïú ÏÉÅÌÉúÏôÄ useEffect
  const [positionState, setPositionState] = React.useState<any>(null);
  
  React.useEffect(() => {
    if (positionState) {
      setPositionLogData(positionState);
    }
  }, [positionState]);
  
  // Î™®Îì† Hook ÏÑ†Ïñ∏ÏùÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä (Ï°∞Í±¥Î∂Ä return Ïù¥Ï†Ñ)
  // Ïù¥ HookÎì§ÏùÄ ÎÇòÏ§ëÏóê Í≥ÑÏÇ∞ÎêòÎäî Î≥ÄÏàòÎì§ÏùÑ ÏÇ¨Ïö©ÌïòÎØÄÎ°ú Î≥ÑÎèÑ stateÎ°ú Í¥ÄÎ¶¨
  const [deferredEffects, setDeferredEffects] = React.useState<{
    columnC?: any;
    position?: any;
  }>({});
  
  React.useEffect(() => {
    if (deferredEffects.columnC) {
      setColumnCParams(deferredEffects.columnC);
    }
  }, [deferredEffects.columnC]);
  
  React.useEffect(() => {
    if (deferredEffects.position) {
      setPositionLogData(deferredEffects.position);
    }
  }, [deferredEffects.position]);
  
  // Column CÏôÄ ÏúÑÏπò Í≥ÑÏÇ∞ÏùÑ ÏúÑÌïú ÏÉÅÌÉú - ÎÇòÏ§ëÏóê Í≥ÑÏÇ∞Îê† Í∞íÎì§
  const [calculatedValues, setCalculatedValues] = React.useState<{
    isColumnCFront?: boolean;
    slotInfoColumn?: any;
    indexingColumnWidth?: number;
    adjustedPosition?: any;
    actualModuleData?: any;
  }>({});
  
  // Í≥ÑÏÇ∞Îêú Í∞íÎì§Ïù¥ Î≥ÄÍ≤ΩÎê† Îïå deferredEffects ÏóÖÎç∞Ïù¥Ìä∏
  React.useEffect(() => {
    if (calculatedValues.isColumnCFront !== undefined) {
      setDeferredEffects({
        columnC: {
          isEnabled: calculatedValues.isColumnCFront,
          depth: calculatedValues.slotInfoColumn?.depth || 300,
          width: calculatedValues.indexingColumnWidth || 600
        },
        position: {
          id: placedModule.id,
          isEditMode,
          placedModulePosition: placedModule.position,
          adjustedPosition: calculatedValues.adjustedPosition,
          positionDifference: calculatedValues.adjustedPosition ? {
            x: calculatedValues.adjustedPosition.x - placedModule.position.x,
            y: calculatedValues.adjustedPosition.y - placedModule.position.y,
            z: calculatedValues.adjustedPosition.z - placedModule.position.z
          } : { x: 0, y: 0, z: 0 },
          zone: placedModule.zone,
          category: calculatedValues.actualModuleData?.category
        }
      });
    }
  }, [calculatedValues, placedModule.id, isEditMode, placedModule.position, placedModule.zone]);

  // ÎÑàÎπÑÏóê Îî∞Îùº Î™®Îìà ID ÏÉùÏÑ± (targetModuleId Ï†ïÏùòÎ•º getModuleById Ìò∏Ï∂ú Ï†ÑÏúºÎ°ú Ïù¥Îèô)
  let targetModuleId = placedModule.moduleId;
  
  // Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• ÎîîÎ≤ÑÍπÖ
  const isUpperCabinet = placedModule.moduleId.includes('upper-cabinet');
  const isLowerCabinet = placedModule.moduleId.includes('lower-cabinet');
  const isDualCabinet = placedModule.moduleId.includes('dual-');
  
  if ((isUpperCabinet || isLowerCabinet) && !isDualCabinet) {
    console.log('üîç Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• Ï≤òÎ¶¨ ÏãúÏûë:', {
      original: placedModule.moduleId,
      customWidth: placedModule.customWidth,
      adjustedWidth: placedModule.adjustedWidth,
      internalSpace,
      zoneSpaceInfo
    });
  }
  
  // adjustedWidthÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ (Í∏∞Îë• A Ïπ®Î≤î) - ÏõêÎ≥∏ Î™®Îìà ID ÏÇ¨Ïö©
  // Ìè≠ Ï°∞Ï†ïÏùÄ Î†åÎçîÎßÅ ÏãúÏóêÎßå Ï†ÅÏö©
  if (placedModule.adjustedWidth) {
    // Í∏∞Îë• A Ïπ®Î≤î - ÏõêÎ≥∏ Î™®Îìà ÏÇ¨Ïö©, Ìè≠ÏùÄ Î†åÎçîÎßÅ Ïãú Ï°∞Ï†ï
  }
  // customWidthÍ∞Ä ÏûàÍ≥† adjustedWidthÍ∞Ä ÏóÜÎäî Í≤ΩÏö∞ - customWidthÎ°ú Î™®Îìà ID ÏÉùÏÑ±
  else if (placedModule.customWidth && !placedModule.adjustedWidth) {
    // ÏÉÅÌïòÎ∂ÄÏû• ÌäπÎ≥Ñ Ï≤òÎ¶¨
    const isUpperLower = targetModuleId.includes('upper-cabinet') || targetModuleId.includes('lower-cabinet');
    
    if (isUpperLower) {
      // Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû•Ïùò Í≤ΩÏö∞ customWidthÎ•º Î¨¥Ï°∞Í±¥ Ï†ÅÏö©
      // Ïù¥ÎØ∏ customWidthÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏñ¥ÎèÑ Îã§Ïãú ÏÑ§Ï†ï
      const baseId = targetModuleId.replace(/-\d+$/, '');
      targetModuleId = `${baseId}-${placedModule.customWidth}`;
      
      if (!isDualCabinet) {
        console.log('üéØ Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• ID Í∞ïÏ†ú Î≥ÄÍ≤Ω:', {
          original: placedModule.moduleId,
          baseId,
          customWidth: placedModule.customWidth,
          newTargetId: targetModuleId
        });
      }
    } else {
      // ÏùºÎ∞ò Í∞ÄÍµ¨: Ïù¥ÎØ∏ customWidthÎ•º Ìè¨Ìï®ÌïòÍ≥† ÏûàÏßÄ ÏïäÏùÑ ÎïåÎßå Î≥ÄÍ≤Ω
      if (!targetModuleId.endsWith(`-${placedModule.customWidth}`)) {
        const baseType = targetModuleId.replace(/-\d+$/, '');
        targetModuleId = `${baseType}-${placedModule.customWidth}`;
      }
    }
  }

  // getModuleById Ìò∏Ï∂ú
  let moduleData = getModuleById(targetModuleId, internalSpace, zoneSpaceInfo);
  
  if ((isUpperCabinet || isLowerCabinet) && !isDualCabinet) {
    console.log('üìå Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• getModuleById Í≤∞Í≥º:', {
      targetModuleId,
      moduleDataFound: !!moduleData,
      moduleData: moduleData ? { id: moduleData.id, dimensions: moduleData.dimensions } : null
    });
  }
  
  // moduleDataÍ∞Ä ÏóÜÏúºÎ©¥ Í∏∞Î≥∏ Î™®Îìà IDÎ°ú Ïû¨ÏãúÎèÑ
  if (!moduleData && targetModuleId !== placedModule.moduleId) {
    if ((isUpperCabinet || isLowerCabinet) && !isDualCabinet) {
      console.log('‚ö†Ô∏è Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• Ï≤´ ÏãúÎèÑ Ïã§Ìå®, ÏõêÎ≥∏ IDÎ°ú Ïû¨ÏãúÎèÑ:', placedModule.moduleId);
    }
    // targetModuleIdÎ°ú Î™®ÎìàÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå, ÏõêÎ≥∏ IDÎ°ú Ïû¨ÏãúÎèÑ
    moduleData = getModuleById(placedModule.moduleId, internalSpace, zoneSpaceInfo);
    
    if ((isUpperCabinet || isLowerCabinet) && !isDualCabinet) {
      console.log('üìå Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• ÏõêÎ≥∏ ID Ïû¨ÏãúÎèÑ Í≤∞Í≥º:', {
        moduleDataFound: !!moduleData
      });
    }
  }
  
  // Í∑∏ÎûòÎèÑ Î™ª Ï∞æÏúºÎ©¥ Îã§ÏñëÌïú Ìå®ÌÑ¥ÏúºÎ°ú Ïû¨ÏãúÎèÑ
  if (!moduleData) {
    const parts = placedModule.moduleId.split('-');
    
    // ÏÉÅÌïòÎ∂ÄÏû• ÌäπÎ≥Ñ Ï≤òÎ¶¨
    const isUpperCabinetFallback = placedModule.moduleId.includes('upper-cabinet');
    const isLowerCabinetFallback = placedModule.moduleId.includes('lower-cabinet');
    
    if (isUpperCabinetFallback || isLowerCabinetFallback) {
      if (!isDualCabinet) {
        console.log('üö® Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• Î™®Îì† ÏãúÎèÑ Ïã§Ìå®, Ìå®ÌÑ¥ Ïû¨ÏãúÎèÑ ÏãúÏûë');
      }
      
      // ÏÉÅÌïòÎ∂ÄÏû•Ïùò Í≤ΩÏö∞ ÎÑàÎπÑÎ•º Î≥ÄÍ≤ΩÌï¥ÏÑú Ïû¨ÏãúÎèÑ
      // Ïòà: upper-cabinet-shelf-600 -> upper-cabinet-shelf-[Ïä¨Î°ØÎÑàÎπÑ]
      if (internalSpace) {
        const baseId = targetModuleId.replace(/-\d+$/, '');
        
        // Ïä¨Î°Ø ÎÑàÎπÑ Ïö∞ÏÑ† ÏÇ¨Ïö©
        let tryWidth = placedModule.customWidth || internalSpace.width;
        
        // Ïä¨Î°Ø Ïù∏Îç±Ïä§Í∞Ä ÏûàÍ≥† indexing Ï†ïÎ≥¥Í∞Ä ÏûàÏúºÎ©¥ Ïä¨Î°Ø ÎÑàÎπÑ ÏÇ¨Ïö©
        if (placedModule.slotIndex !== undefined && indexing && indexing.columnWidth) {
          tryWidth = indexing.columnWidth;
          if (!isDualCabinet) {
            console.log('üîß Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• Ïä¨Î°Ø ÎÑàÎπÑÎ°ú ÏãúÎèÑ:', {
              slotIndex: placedModule.slotIndex,
              columnWidth: indexing.columnWidth,
              tryWidth
            });
          }
        }
        
        const newId = `${baseId}-${tryWidth}`;
        
        if (!isDualCabinet) {
          console.log('üîß Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• ÏãúÎèÑ ID:', newId);
        }
        
        moduleData = getModuleById(newId, internalSpace, zoneSpaceInfo);
        
        // Í∑∏ÎûòÎèÑ Î™ª Ï∞æÏúºÎ©¥ Îã§ÏñëÌïú ÎÑàÎπÑÎì§Î°ú ÏãúÎèÑ
        if (!moduleData) {
          // Ïä¨Î°Ø Í∏∞Î∞ò ÎÑàÎπÑÎì§ Î®ºÏ†Ä ÏãúÎèÑ
          const tryWidths = [
            placedModule.customWidth,
            indexing?.columnWidth,
            internalSpace.width,
            600, 900, 1200, 1500, 1800
          ].filter(w => w && w > 0);
          
          // Ï§ëÎ≥µ Ï†úÍ±∞
          const uniqueWidths = [...new Set(tryWidths)];
          
          for (const width of uniqueWidths) {
            const testId = `${baseId}-${width}`;
            if (!isDualCabinet) {
              console.log('üîß Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• ÎÑàÎπÑÎ°ú ÏãúÎèÑ:', testId);
            }
            moduleData = getModuleById(testId, internalSpace, zoneSpaceInfo);
            if (moduleData) {
              if (!isDualCabinet) {
                console.log('‚úÖ Ïã±Í∏Ä ÏÉÅÌïòÎ∂ÄÏû• Ï∞æÏùå!:', testId);
              }
              break;
            }
          }
        }
      }
    } else {
      // ÏùºÎ∞ò Í∞ÄÍµ¨ Ï≤òÎ¶¨ (Í∏∞Ï°¥ Î°úÏßÅ)
      if (parts.length >= 3) {
        // ÎßàÏßÄÎßâÏù¥ Ïà´ÏûêÎ©¥ Ï†úÍ±∞ÌïòÍ≥† ÏãúÎèÑ
        if (/^\d+$/.test(parts[parts.length - 1])) {
          const withoutWidth = parts.slice(0, -1).join('-');
          moduleData = getModuleById(withoutWidth, internalSpace, zoneSpaceInfo);
        }
        
        // Í∑∏ÎûòÎèÑ ÏóÜÏúºÎ©¥ upper/lower Ï†úÍ±∞ÌïòÍ≥† ÏãúÎèÑ  
        if (!moduleData && (parts.includes('upper') || parts.includes('lower'))) {
          const withoutCategory = parts.filter(p => p !== 'upper' && p !== 'lower').join('-');
          moduleData = getModuleById(withoutCategory, internalSpace, zoneSpaceInfo);
        }
      }
      
      // Ìå®ÌÑ¥ 2: Í∏∞Î≥∏ ÌÉÄÏûÖÎßåÏúºÎ°ú ÏãúÎèÑ (single-open)
      if (!moduleData) {
        const baseType = parts.slice(0, 2).join('-');
        if (baseType !== placedModule.moduleId) {
          moduleData = getModuleById(baseType, internalSpace, zoneSpaceInfo);
        }
      }
    }
    
    // customWidth Ï†ÅÏö©
    if (moduleData && placedModule.customWidth) {
      moduleData = {
        ...moduleData,
        dimensions: {
          ...moduleData.dimensions,
          width: placedModule.customWidth
        }
      };
    }
  }
  
  // moduleDataÍ∞Ä ÏóÜÏùÑ Îïå Ï≤¥ÌÅ¨ - Îã®Ïàú Î≥ÄÏàòÎ°ú Ï≤òÎ¶¨
  const moduleNotFound = !moduleData;
  
  // ÎèÑÏñ¥ ÏúÑÏπò Í≥†Ï†ïÏùÑ ÏúÑÌïú ÏõêÎûò Ïä¨Î°Ø Ï†ïÎ≥¥ Í≥ÑÏÇ∞ - zoneÎ≥Ñ Ï≤òÎ¶¨
  let indexing;
  if (spaceInfo.droppedCeiling?.enabled && placedModule.zone) {
    const zoneInfo = ColumnIndexer.calculateZoneSlotInfo(spaceInfo, spaceInfo.customColumnCount);
    const targetZone = placedModule.zone === 'dropped' && zoneInfo.dropped ? zoneInfo.dropped : zoneInfo.normal;
    
    // zoneÎ≥Ñ indexingÏùÄ targetZone Ï†ïÎ≥¥Î•º ÏßÅÏ†ë ÏÇ¨Ïö©
    indexing = {
      columnCount: targetZone.columnCount,
      columnWidth: targetZone.columnWidth,
      threeUnitPositions: [],
      threeUnitDualPositions: {},
      threeUnitBoundaries: []
    };
  } else {
    indexing = calculateSpaceIndexing(zoneSpaceInfo);
  }

  const zoneSlotInfo = React.useMemo(() => {
    if (!spaceInfo.droppedCeiling?.enabled) {
      return null;
    }
    return ColumnIndexer.calculateZoneSlotInfo(spaceInfo, spaceInfo.customColumnCount);
  }, [spaceInfo.droppedCeiling?.enabled, spaceInfo.customColumnCount, spaceInfo.width, spaceInfo.installType, spaceInfo.gapConfig, spaceInfo.surroundType]);

  const convertGlobalToZoneIndex = React.useCallback((
    index: number | undefined,
    zone: 'normal' | 'dropped' | undefined
  ): number | undefined => {
    if (index === undefined || zone === undefined) {
      return index;
    }

    if (!spaceInfo.droppedCeiling?.enabled || !zoneSlotInfo) {
      return index;
    }

    const zoneInfo = zone === 'dropped' ? zoneSlotInfo.dropped : zoneSlotInfo.normal;
    const zoneCount = zoneInfo?.columnCount ?? 0;

    const clampIndex = (value: number): number => {
      if (zoneCount <= 0) {
        return 0;
      }
      if (value < 0) {
        return 0;
      }
      if (value >= zoneCount) {
        return zoneCount - 1;
      }
      return value;
    };

    if (zoneCount > 0 && index >= 0 && index < zoneCount) {
      return index;
    }

    const droppedCount = zoneSlotInfo.dropped?.columnCount ?? 0;
    const normalCount = zoneSlotInfo.normal?.columnCount ?? 0;
    const position = spaceInfo.droppedCeiling.position;

    if (zone === 'normal' && position === 'left') {
      return clampIndex(index - droppedCount);
    }

    if (zone === 'dropped' && position === 'right') {
      return clampIndex(index - normalCount);
    }

    return clampIndex(index);
  }, [spaceInfo.droppedCeiling?.enabled, spaceInfo.droppedCeiling?.position, zoneSlotInfo]);

  const convertZoneToGlobalIndex = React.useCallback((
    index: number | undefined,
    zone: 'normal' | 'dropped' | undefined
  ): number | undefined => {
    if (index === undefined || zone === undefined) {
      return index;
    }

    if (!spaceInfo.droppedCeiling?.enabled || !zoneSlotInfo) {
      return index;
    }

    const zoneInfo = zone === 'dropped' ? zoneSlotInfo.dropped : zoneSlotInfo.normal;
    const zoneCount = zoneInfo?.columnCount ?? 0;

    if (zoneCount > 0 && index >= zoneCount) {
      return index;
    }

    if (zone === 'normal' && spaceInfo.droppedCeiling.position === 'left') {
      return index + (zoneSlotInfo.dropped?.columnCount ?? 0);
    }

    if (zone === 'dropped' && spaceInfo.droppedCeiling.position === 'right') {
      return index + (zoneSlotInfo.normal?.columnCount ?? 0);
    }

    return index;
  }, [spaceInfo.droppedCeiling?.enabled, spaceInfo.droppedCeiling?.position, zoneSlotInfo]);

  const localSlotIndex = React.useMemo(() => {
    if (placedModule.slotIndex === undefined) {
      return undefined;
    }
    return convertGlobalToZoneIndex(placedModule.slotIndex, placedModule.zone as 'normal' | 'dropped');
  }, [placedModule.slotIndex, placedModule.zone, convertGlobalToZoneIndex]);

  const globalSlotIndex = React.useMemo(() => {
    if (placedModule.slotIndex === undefined) {
      return undefined;
    }

    const baseIndex = localSlotIndex !== undefined ? localSlotIndex : placedModule.slotIndex;
    return convertZoneToGlobalIndex(baseIndex, placedModule.zone as 'normal' | 'dropped');
  }, [placedModule.slotIndex, placedModule.zone, localSlotIndex, convertZoneToGlobalIndex]);

  const normalizedSlotIndex = localSlotIndex ?? placedModule.slotIndex;

  const slotInfo = globalSlotIndex !== undefined ? columnSlots[globalSlotIndex] : undefined;

  const slotBoundaries = React.useMemo(() => {
    if (normalizedSlotIndex === undefined) {
      return null;
    }

    if (spaceInfo.droppedCeiling?.enabled && placedModule.zone && zoneSlotInfo) {
      const targetZone = placedModule.zone === 'dropped' ? zoneSlotInfo.dropped : zoneSlotInfo.normal;
      if (targetZone) {
        const slotWidths = targetZone.slotWidths && targetZone.slotWidths.length === targetZone.columnCount
          ? targetZone.slotWidths
          : new Array(targetZone.columnCount).fill(targetZone.columnWidth);

        if (normalizedSlotIndex >= slotWidths.length) {
          return null;
        }

        let accumulated = targetZone.startX;
        for (let i = 0; i < normalizedSlotIndex; i++) {
          accumulated += slotWidths[i];
        }
        const left = accumulated;
        const right = accumulated + slotWidths[normalizedSlotIndex];

        return {
          left: left * 0.01,
          right: right * 0.01
        } as const;
      }
    }

    if (indexing.threeUnitBoundaries && indexing.threeUnitBoundaries.length > normalizedSlotIndex + 1) {
      return {
        left: indexing.threeUnitBoundaries[normalizedSlotIndex],
        right: indexing.threeUnitBoundaries[normalizedSlotIndex + 1]
      } as const;
    }

    return null;
  }, [normalizedSlotIndex, spaceInfo.droppedCeiling?.enabled, placedModule.zone, zoneSlotInfo, indexing.threeUnitBoundaries]);

  const isColumnC = (slotInfo?.columnType === 'medium') || false;
  
  // ÎìÄÏñº ‚Üí Ïã±Í∏Ä Î≥ÄÌôò ÌôïÏù∏ (ÎìúÎûòÍ∑∏ Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå, Í∏∞Îë• CÍ∞Ä ÏïÑÎãê ÎïåÎßå)
  const actualModuleData = React.useMemo(() => {
    let result = moduleData;
    if (moduleData) {
      if (!isFurnitureDragging && slotInfo && slotInfo.hasColumn && !isColumnC) {
        const conversionResult = convertDualToSingleIfNeeded(moduleData, slotInfo, spaceInfo);
        if (conversionResult.shouldConvert && conversionResult.convertedModuleData) {
          result = conversionResult.convertedModuleData;
        }
      }
      
      // Column CÏóêÏÑú Ïã±Í∏Ä Í∞ÄÍµ¨Î°ú Î≥ÄÌôò (ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä Column CÏóê Î∞∞ÏπòÎêú Í≤ΩÏö∞)
      if (!isFurnitureDragging && isColumnC && moduleData.id.includes('dual-')) {
        result = {
          ...moduleData,
          id: moduleData.id.replace('dual-', 'single-'),
          name: moduleData.name.replace('ÎìÄÏñº', 'Ïã±Í∏Ä'),
          dimensions: {
            ...moduleData.dimensions,
            width: slotInfo?.subSlots ? 
              (placedModule.subSlotPosition === 'left' ? 
                slotInfo.subSlots.left.availableWidth : 
                slotInfo.subSlots.right.availableWidth) : 
              indexing.columnWidth / 2
          }
        };
      }
    }
    return result;
  }, [moduleData, isFurnitureDragging, slotInfo, isColumnC, spaceInfo, placedModule.subSlotPosition, indexing.columnWidth]);
  
  // ÎìÄÏñº Í∞ÄÍµ¨Ïù∏ÏßÄ ÌôïÏù∏ (Í∞ÄÏû• Î®ºÏ†Ä Í≥ÑÏÇ∞)
  // placedModule.isDualSlotÏù¥ ÏûàÏúºÎ©¥ Í∑∏Í≤ÉÏùÑ ÏÇ¨Ïö©, ÏóÜÏúºÎ©¥ Î™®Îìà IDÎ°ú ÌåêÎã®
  const isDualFurniture = placedModule.isDualSlot !== undefined 
    ? placedModule.isDualSlot 
    : actualModuleData?.id.includes('dual-') || false;
  
  // ÏÉÅÎ∂ÄÏû•/ÌïòÎ∂ÄÏû•Í≥º Ïù∏Ï†ëÌïú ÌÇ§ÌÅ∞Ïû•Ïù∏ÏßÄ ÌôïÏù∏ (actualModuleDataÍ∞Ä ÏûàÏùÑ ÎïåÎßå)
  const adjacentCheck = actualModuleData 
    ? checkAdjacentUpperLowerToFull(placedModule, placedModules, spaceInfo)
    : { hasAdjacentUpperLower: false, adjacentSide: null };
  
  // ÎìÄÏñº Í∞ÄÍµ¨ Ïù∏Ï†ë Ï≤¥ÌÅ¨ ÎîîÎ≤ÑÍπÖ
  if (isDualFurniture && actualModuleData) {
    }
  
  // ÎßàÏßÄÎßâ Ïä¨Î°ØÏù∏ÏßÄ ÌôïÏù∏ (adjustedPosition Ï¥àÍ∏∞Ìôî Ï†ÑÏóê ÌïÑÏöî)
  const isLastSlot = normalizedSlotIndex !== undefined
    ? normalizedSlotIndex === indexing.columnCount - 1
    : false;
  
  // adjustedPosition Í≥ÑÏÇ∞ÏùÑ useMemoÎ°ú ÏµúÏ†ÅÌôî (Ï¥àÍ∏∞Í∞íÎßå ÏÑ§Ï†ï)
  const initialAdjustedPosition = React.useMemo(() => {
    const basePosition = { ...(placedModule.position || { x: 0, y: 0, z: 0 }) };
    if (isLastSlot && !isFurnitureDragging) {
      // ÎßàÏßÄÎßâ Ïä¨Î°ØÏùÄ originalSlotCenterXÎ•º ÎÇòÏ§ëÏóê Í≥ÑÏÇ∞ÌïòÎØÄÎ°ú Ïó¨Í∏∞ÏÑúÎäî position ÏÇ¨Ïö©
      return { ...(placedModule.position || { x: 0, y: 0, z: 0 }) };
    }
    return basePosition;
  }, [placedModule.position, isLastSlot, isFurnitureDragging]);
  
  // üî¥üî¥üî¥ YÏ∂ï ÏúÑÏπò Í≥ÑÏÇ∞ - actualModuleDataÍ∞Ä Ï†ïÏùòÎêú ÌõÑÏóê Ïã§Ìñâ
  // ÏÉÅÎ∂ÄÏû• Ï≤¥ÌÅ¨ (Î≥ÄÏàòÎ™Ö Î≥ÄÍ≤Ω: ÏúÑÏóêÏÑú Ïù¥ÎØ∏ ÏÑ†Ïñ∏Îê®)
  const isUpperCabinetForY = placedModule.moduleId?.includes('upper-cabinet') || 
                             placedModule.moduleId?.includes('dual-upper-cabinet');
  
  // ÌïòÎ∂ÄÏû• Ï≤¥ÌÅ¨ (Î≥ÄÏàòÎ™Ö Î≥ÄÍ≤Ω: ÏúÑÏóêÏÑú Ïù¥ÎØ∏ ÏÑ†Ïñ∏Îê®)
  const isLowerCabinetForY = placedModule.moduleId?.includes('lower-cabinet') || 
                             placedModule.moduleId?.includes('dual-lower-cabinet');
  
  // ÌÇ§ÌÅ∞Ïû• Ï≤¥ÌÅ¨
  const isTallCabinetForY = actualModuleData?.category === 'full';
  
  // adjustedPosition Í≥ÑÏÇ∞ (YÏ∂ï ÏúÑÏπò Ìè¨Ìï®)
  let adjustedPosition = initialAdjustedPosition;
  
  if (isUpperCabinetForY && actualModuleData) {
    // ÏÉÅÎ∂ÄÏû•ÏùÄ ÏÉÅÎ∂ÄÌîÑÎ†àÏûÑ ÌïòÎã®Ïóê Î∂ôÏñ¥Ïïº Ìï®
    const upperCabinetHeight = actualModuleData?.dimensions.height || 0; // ÏÉÅÎ∂ÄÏû• ÎÜíÏù¥
    
    // ÎùÑÏõåÏÑú Î∞∞Ïπò Î™®ÎìúÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ ÏÉÅÎ∂ÄÏû•ÏùÄ Ìï≠ÏÉÅ ÏÉÅÎ∂ÄÌîÑÎ†àÏûÑ ÌïòÎã®Ïóê Î∂ôÏñ¥Ïïº Ìï®
    // Î∞îÎã• ÎßàÍ∞êÏû¨ ÎÜíÏù¥
    const floorFinishHeightMm = spaceInfo.hasFloorFinish && spaceInfo.floorFinish ? spaceInfo.floorFinish.height : 0;
    
    // ÏÉÅÎ∂ÄÌîÑÎ†àÏûÑ ÎÜíÏù¥ - frameSize.top ÏÇ¨Ïö©
    const topFrameHeightMm = spaceInfo.frameSize?.top || 10; // Í∏∞Î≥∏Í∞í 10mm
    
    // ÌïòÎ∂ÄÌîÑÎ†àÏûÑ ÎÜíÏù¥ - frameSize.bottom ÏÇ¨Ïö©  
    const bottomFrameHeightMm = spaceInfo.frameSize?.bottom || 0;
    
    // ÎÇ¥Í≤Ω ÎÜíÏù¥ = Ï†ÑÏ≤¥ ÎÜíÏù¥ - ÏÉÅÎ∂ÄÌîÑÎ†àÏûÑ - ÌïòÎ∂ÄÌîÑÎ†àÏûÑ - Î∞îÎã•ÎßàÍ∞êÏû¨
    const internalHeight = spaceInfo.height - topFrameHeightMm - bottomFrameHeightMm - floorFinishHeightMm;
    
    // ÏÉÅÎ∂ÄÏû• Ï§ëÏã¨ Y = Î∞îÎã•ÎßàÍ∞êÏû¨ + ÌïòÎ∂ÄÌîÑÎ†àÏûÑ + ÎÇ¥Í≤ΩÎÜíÏù¥ - ÏÉÅÎ∂ÄÏû• ÎÜíÏù¥/2
    // Ïù¥Î†áÍ≤å ÌïòÎ©¥ ÏÉÅÎ∂ÄÏû• ÏÉÅÎã®Ïù¥ ÏÉÅÎ∂ÄÌîÑÎ†àÏûÑ ÌïòÎã®Ïóê Îî± Î∂ôÏùå
    const upperCabinetCenterY = (floorFinishHeightMm + bottomFrameHeightMm + internalHeight - upperCabinetHeight/2) * 0.01;
    
    adjustedPosition = {
      ...adjustedPosition,
      y: upperCabinetCenterY
    };
    
    } 
  // ÌïòÎ∂ÄÏû•Í≥º ÌÇ§ÌÅ∞Ïû•Ïùò ÎùÑÏõåÏÑú Î∞∞Ïπò Ï≤òÎ¶¨
  else if ((isLowerCabinetForY || isTallCabinetForY) && actualModuleData) {
    // ÎùÑÏõåÏÑú Î∞∞Ïπò ÌôïÏù∏ - placementTypeÏù¥ Î™ÖÏãúÏ†ÅÏúºÎ°ú 'float'Ïù¥Í≥† typeÏù¥ 'stand'Ïùº ÎïåÎßå
    const isFloatPlacement = spaceInfo.baseConfig?.type === 'stand' && spaceInfo.baseConfig?.placementType === 'float';
    
    if (isFloatPlacement) {
      // Î∞îÎã• ÎßàÍ∞êÏû¨ ÎÜíÏù¥
      const floorFinishHeightMm = spaceInfo.hasFloorFinish && spaceInfo.floorFinish ? 
                                  spaceInfo.floorFinish.height : 0;
      const floorFinishHeight = floorFinishHeightMm * 0.01; // mm to Three.js units
      
      // ÎùÑÏõÄ ÎÜíÏù¥ - baseConfigÍ∞Ä ÏûàÏùÑ ÎïåÎßå floatHeight Í∞ÄÏ†∏Ïò§Í∏∞
      const floatHeightMm = spaceInfo.baseConfig?.floatHeight || 0;
      const floatHeight = floatHeightMm * 0.01; // mm to Three.js units
      
      // Í∞ÄÍµ¨ ÎÜíÏù¥
      const furnitureHeight = (actualModuleData?.dimensions.height || 0) * 0.01; // mm to Three.js units
      
      // Y ÏúÑÏπò Í≥ÑÏÇ∞: Î∞îÎã•ÎßàÍ∞êÏû¨ + ÎùÑÏõÄÎÜíÏù¥ + Í∞ÄÍµ¨ÎÜíÏù¥/2
      const yPos = floorFinishHeight + floatHeight + (furnitureHeight / 2);
      
      adjustedPosition = {
        ...adjustedPosition,
        y: yPos
      };
      
      } else {
      // ÏùºÎ∞ò Î∞∞Ïπò (Î∞õÏπ®ÎåÄ ÏûàÍ±∞ÎÇò Î∞îÎã• Î∞∞Ïπò)
      // Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î∞õÏπ®ÎåÄ ÎÜíÏù¥ 65mm Ï†ÅÏö©, stand ÌÉÄÏûÖÏùº ÎïåÎßå 0
      const baseHeightMm = spaceInfo.baseConfig?.type === 'stand' ? 0 : (spaceInfo.baseConfig?.height || 65);
      const baseHeight = baseHeightMm * 0.01; // mm to Three.js units
      
      // Î∞îÎã• ÎßàÍ∞êÏû¨ ÎÜíÏù¥
      const floorFinishHeightMm = spaceInfo.hasFloorFinish && spaceInfo.floorFinish ? 
                                  spaceInfo.floorFinish.height : 0;
      const floorFinishHeight = floorFinishHeightMm * 0.01; // mm to Three.js units
      
      // Í∞ÄÍµ¨ ÎÜíÏù¥
      const furnitureHeight = (actualModuleData?.dimensions.height || 0) * 0.01; // mm to Three.js units
      
      // Y ÏúÑÏπò Í≥ÑÏÇ∞: Î∞îÎã•ÎßàÍ∞êÏû¨ + Î∞õÏπ®ÎåÄÎÜíÏù¥ + Í∞ÄÍµ¨ÎÜíÏù¥/2
      const yPos = floorFinishHeight + baseHeight + (furnitureHeight / 2);
      
      adjustedPosition = {
        ...adjustedPosition,
        y: yPos
      };
      
      }
  }
  
  // Í∏∞Îë• Ïπ®Î≤î ÏÉÅÌô© ÌôïÏù∏ Î∞è Í∞ÄÍµ¨/ÎèÑÏñ¥ ÌÅ¨Í∏∞ Ï°∞Ï†ï
  // customWidthÎäî Ïä¨Î°Ø Í∏∞Î∞ò ÎÑàÎπÑ Ï°∞Ï†ï Ïãú ÏÇ¨Ïö©, adjustedWidthÎäî Í∏∞Îë• Ïπ®Î≤î Ïãú ÏÇ¨Ïö©
  // ÎìÄÏñº Í∞ÄÍµ¨Îäî customWidthÍ∞Ä Ïò¨Î∞îÎ•∏ÏßÄ ÌôïÏù∏ ÌïÑÏöî
  let furnitureWidthMm = actualModuleData?.dimensions.width || 0; // Í∏∞Î≥∏Í∞í
  
  // adjustedWidthÍ∞Ä ÏûàÏúºÎ©¥ ÏµúÏö∞ÏÑ† ÏÇ¨Ïö© (Í∏∞Îë• Ïπ®Î≤î ÏºÄÏù¥Ïä§)
  if (placedModule.adjustedWidth !== undefined && placedModule.adjustedWidth !== null) {
    furnitureWidthMm = placedModule.adjustedWidth;
    } else if (placedModule.customWidth !== undefined && placedModule.customWidth !== null) {
    // customWidthÍ∞Ä Î™ÖÏãúÏ†ÅÏúºÎ°ú ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎ©¥ ÏÇ¨Ïö© (Î∞∞Ïπò/ÎìúÎûòÍ∑∏/ÌÇ§Î≥¥Îìú Ïù¥Îèô Ïãú ÏÑ§Ï†ïÎêú Ïä¨Î°Ø ÎßûÏ∂§ ÎÑàÎπÑ)
    furnitureWidthMm = placedModule.customWidth;
    } else {
    // Í∏∞Î≥∏Í∞íÏùÄ Î™®Îìà ÏõêÎûò ÌÅ¨Í∏∞ (Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ§Ï†ïÎê®)
    }
  
  // ÏóîÎìúÌå®ÎÑê Ï°∞Ï†ï Ï†Ñ ÏõêÎûò ÎÑàÎπÑ Ï†ÄÏû• (ÏóîÎìúÌå®ÎÑê Ï°∞Ï†ï Ïãú ÏÇ¨Ïö©)
  let originalFurnitureWidthMm = furnitureWidthMm;
  
  // Ïä¨Î°Ø Í∞ÄÏù¥ÎìúÏôÄÏùò ÌÅ¨Í∏∞ ÎπÑÍµê Î°úÍ∑∏
  if (indexing.slotWidths && normalizedSlotIndex !== undefined) {
    const slotGuideWidth = isDualFurniture && normalizedSlotIndex < indexing.slotWidths.length - 1
      ? indexing.slotWidths[normalizedSlotIndex] + indexing.slotWidths[normalizedSlotIndex + 1]
      : indexing.slotWidths[normalizedSlotIndex];
    
    }
  
  // ÌÇ§ÌÅ∞Ïû•Ïù∏ÏßÄ ÌôïÏù∏ (2hangingÏù¥ Ìè¨Ìï®Îêú Î™®Îìà ID)
  const isTallCabinet = actualModuleData?.id?.includes('2hanging') || false;

  // ÌÇ§ÌÅ∞Ïû• ÏóîÎìúÌå®ÎÑê Ï≤òÎ¶¨
  let adjustedWidthForEndPanel = furnitureWidthMm;
  let positionAdjustmentForEndPanel = 0; // ÏúÑÏπò Ï°∞Ï†ïÍ∞í
  
  // ÌÇ§ÌÅ∞Ïû•Ïù¥ ÏÉÅÌïòÎ∂ÄÏû•Í≥º Ïù∏Ï†ëÌïú Í≤ΩÏö∞ ÌôïÏù∏
  const needsEndPanelAdjustment = adjacentCheck.hasAdjacentUpperLower;
  const endPanelSide = adjacentCheck.adjacentSide;
  
  // üî¥üî¥üî¥ ÏóîÎìúÌå®ÎÑê ÎîîÎ≤ÑÍπÖ - ÌÇ§ÌÅ∞Ïû•Ïùº ÎïåÎßå
  if (actualModuleData?.category === 'full') {
    }
  
  // ÎÖ∏ÏÑúÎùºÏö¥Îìú Ï≤´/ÎßàÏßÄÎßâ Ïä¨Î°Ø Ïó¨Î∂Ä ÌôïÏù∏ (ÏÉÅÌïòÎ∂ÄÏû• Ï≤òÎ¶¨ÏóêÏÑú ÏÇ¨Ïö©)
  // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©ÎèÑ ÌîÑÎ¶¨Ïä§ÌÉ†Îî©Í≥º ÎèôÏùºÌïòÍ≤å Ï≤òÎ¶¨
  // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©Ïùò Í≤ΩÏö∞ Î≤ΩÏù¥ ÏóÜÎäî Ï™Ω Ïä¨Î°ØÎßå Ìï¥Îãπ
  const isSemiStanding = spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing';
  const hasLeftWall = spaceInfo.wallConfig?.left;
  const hasRightWall = spaceInfo.wallConfig?.right;
  
  const isNoSurroundFirstSlot = spaceInfo.surroundType === 'no-surround' && 
                                  ((spaceInfo.installType === 'freestanding') || 
                                   (isSemiStanding && !hasLeftWall)) && // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©ÏóêÏÑú ÏôºÏ™Ω Î≤ΩÏù¥ ÏóÜÎäî Í≤ΩÏö∞
                                  normalizedSlotIndex === 0;
  const isNoSurroundLastSlot = spaceInfo.surroundType === 'no-surround' && 
                                 ((spaceInfo.installType === 'freestanding') ||
                                  (isSemiStanding && !hasRightWall)) && // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©ÏóêÏÑú Ïò§Î•∏Ï™Ω Î≤ΩÏù¥ ÏóÜÎäî Í≤ΩÏö∞
                                 isLastSlot;
  // ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä ÎßàÏßÄÎßâ Ïä¨Î°ØÏóê ÏûàÎäî Í≤ΩÏö∞
  const isNoSurroundDualLastSlot = spaceInfo.surroundType === 'no-surround' && 
                                    ((spaceInfo.installType === 'freestanding') ||
                                     (isSemiStanding && !hasRightWall)) && // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©ÏóêÏÑú Ïò§Î•∏Ï™Ω Î≤ΩÏù¥ ÏóÜÎäî Í≤ΩÏö∞
                                    isDualFurniture && 
                                    normalizedSlotIndex === indexing.columnCount - 2;
  
  // ÌÇ§ÌÅ∞Ïû•Ïù¥ ÏÉÅÌïòÎ∂ÄÏû•Í≥º Ïù∏Ï†ëÌñàÏùÑ Îïå - ÎÑàÎπÑ Ï°∞Ï†ï Î∞è ÏúÑÏπò Ïù¥Îèô
  if (needsEndPanelAdjustment && endPanelSide) {
    // ÎÖ∏ÏÑúÎùºÏö¥Îìú Ï≤´/ÎßàÏßÄÎßâ Ïä¨Î°ØÏóêÏÑúÎäî ÌäπÎ≥Ñ Ï≤òÎ¶¨
    if (isNoSurroundFirstSlot || isNoSurroundLastSlot || isNoSurroundDualLastSlot) {
      // ÎÖ∏ÏÑúÎùºÏö¥ÎìúÏóêÏÑúÎäî Î∞îÍπ•Ï™Ω ÏóîÎìúÌå®ÎÑê 18mm + ÏïàÏ™Ω ÏÉÅÌïòÎ∂ÄÏû• ÏóîÎìúÌå®ÎÑê 18mm = Ï¥ù 36mm Ï§ÑÏûÑ
      if (endPanelSide === 'left') {
        // ÎßàÏßÄÎßâ Ïä¨Î°ØÏóêÏÑú ÏôºÏ™Ω ÏÉÅÌïòÎ∂ÄÏû•: Ï¥ù 36mm Ï§ÑÏù¥Í≥† ÏúÑÏπòÎäî Ï§ëÏïô Ïú†ÏßÄ
        adjustedWidthForEndPanel = originalFurnitureWidthMm - (END_PANEL_THICKNESS * 2); // 36mm Ï§ÑÏûÑ
        // ÏúÑÏπòÎäî Ïù¥ÎèôÌïòÏßÄ ÏïäÏùå (Ïä¨Î°Ø Ï§ëÏïô Ïú†ÏßÄ)
        positionAdjustmentForEndPanel = 0;
      } else if (endPanelSide === 'right') {
        // Ï≤´Î≤àÏß∏ Ïä¨Î°ØÏóêÏÑú Ïò§Î•∏Ï™Ω ÏÉÅÌïòÎ∂ÄÏû•: Ï¥ù 36mm Ï§ÑÏù¥Í≥† ÏúÑÏπòÎäî Ï§ëÏïô Ïú†ÏßÄ
        adjustedWidthForEndPanel = originalFurnitureWidthMm - (END_PANEL_THICKNESS * 2); // 36mm Ï§ÑÏûÑ
        // ÏúÑÏπòÎäî Ïù¥ÎèôÌïòÏßÄ ÏïäÏùå (Ïä¨Î°Ø Ï§ëÏïô Ïú†ÏßÄ)
        positionAdjustmentForEndPanel = 0;
      } else if (endPanelSide === 'both') {
        // ÏñëÏ™Ω ÏÉÅÌïòÎ∂ÄÏû•: 54mm Ï§ÑÏù¥Í≥† Ï§ëÏïô Ïú†ÏßÄ (Î∞îÍπ•Ï™Ω 18mm + ÏñëÏ™Ω ÏïàÏ™Ω 36mm)
        adjustedWidthForEndPanel = originalFurnitureWidthMm - (END_PANEL_THICKNESS * 3);
        positionAdjustmentForEndPanel = 0;
      }
    } else {
      // ÏùºÎ∞òÏ†ÅÏù∏ Í≤ΩÏö∞: ÏóîÎìúÌå®ÎÑê ÎëêÍªòÎßåÌÅº ÌÇ§ÌÅ∞Ïû• ÎÑàÎπÑÎ•º Ï§ÑÏù¥Í≥† ÏúÑÏπò Ï°∞Ï†ï
      if (endPanelSide === 'left') {
        // ÏôºÏ™ΩÏóê ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ ÏûàÏúºÎ©¥ 18mm Ï§ÑÏù¥Í≥† Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm Ïù¥Îèô
        adjustedWidthForEndPanel = originalFurnitureWidthMm - END_PANEL_THICKNESS;
        positionAdjustmentForEndPanel = (END_PANEL_THICKNESS / 2) * 0.01; // Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm Ïù¥Îèô
      } else if (endPanelSide === 'right') {
        // Ïò§Î•∏Ï™ΩÏóê ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ ÏûàÏúºÎ©¥ 18mm Ï§ÑÏù¥Í≥† ÏôºÏ™ΩÏúºÎ°ú 9mm Ïù¥Îèô
        adjustedWidthForEndPanel = originalFurnitureWidthMm - END_PANEL_THICKNESS;
        positionAdjustmentForEndPanel = -(END_PANEL_THICKNESS / 2) * 0.01; // ÏôºÏ™ΩÏúºÎ°ú 9mm Ïù¥Îèô
      } else if (endPanelSide === 'both') {
        // ÏñëÏ™ΩÏóê ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ ÏûàÏúºÎ©¥ 36mm Ï§ÑÏù¥Í≥† Ï§ëÏïô Ïú†ÏßÄ
        adjustedWidthForEndPanel = originalFurnitureWidthMm - (END_PANEL_THICKNESS * 2);
        positionAdjustmentForEndPanel = 0;
      }
    }
    
    furnitureWidthMm = adjustedWidthForEndPanel; // Ïã§Ï†ú Í∞ÄÍµ¨ ÎÑàÎπÑ ÏóÖÎç∞Ïù¥Ìä∏
  }
  
  // ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú ÏóîÎìúÌå®ÎÑê Ï≤òÎ¶¨
  // Î≤ΩÏóÜÏùå(freestanding) ÎòêÎäî ÌïúÏ™ΩÎ≤Ω(semistanding) Î™®ÎìúÏóêÏÑú ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÎäî Ïä¨Î°Ø Ï≤òÎ¶¨
  if (spaceInfo.surroundType === 'no-surround' && 
      (spaceInfo.installType === 'freestanding' || 
       spaceInfo.installType === 'semistanding' || 
       spaceInfo.installType === 'semi-standing') && 
      normalizedSlotIndex !== undefined) {

    // ÌîÑÎ¶¨Ïä§ÌÉ†Îî©ÏóêÏÑúÎäî ÏñëÏ™Ω Î™®Îëê, ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©ÏóêÏÑúÎäî Î≤ΩÏù¥ ÏóÜÎäî Ï™ΩÎßå Ï≤òÎ¶¨
    let shouldProcessFirstSlot = false;
    let shouldProcessLastSlot = false;

    if (spaceInfo.installType === 'freestanding') {
      // ÌîÑÎ¶¨Ïä§ÌÉ†Îî©: ÏñëÏ™Ω Î™®Îëê Ï≤òÎ¶¨
      shouldProcessFirstSlot = normalizedSlotIndex === 0;
      shouldProcessLastSlot = isLastSlot;
    } else if (spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') {
      // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©: Î≤ΩÏù¥ ÏóÜÎäî Ï™ΩÎßå Ï≤òÎ¶¨
      shouldProcessFirstSlot = normalizedSlotIndex === 0 && !spaceInfo.wallConfig?.left;
      shouldProcessLastSlot = isLastSlot && !spaceInfo.wallConfig?.right;
    }

    // ÎìÄÏñº Í∞ÄÍµ¨Ïùò Í≤ΩÏö∞: Ï≤´Î≤àÏß∏ Ïä¨Î°ØÏóê ÏûàÍ≥†, ÏôºÏ™ΩÏóê Î≤ΩÏù¥ ÏóÜÏúºÎ©¥ Ï≤òÎ¶¨
    const isDualFirstSlot = isDualFurniture && normalizedSlotIndex === 0 && 
                            (spaceInfo.installType === 'freestanding' || 
                             ((spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') && !spaceInfo.wallConfig?.left));

    const isFirstSlotNoSurround = shouldProcessFirstSlot && !isDualFirstSlot;

    // ÎìÄÏñº Í∞ÄÍµ¨Ïùò Í≤ΩÏö∞: ÎßàÏßÄÎßâÏóêÏÑú ÎëêÎ≤àÏß∏ Ïä¨Î°ØÏóê ÏûàÍ≥†, Ïò§Î•∏Ï™ΩÏóê Î≤ΩÏù¥ ÏóÜÏúºÎ©¥ Ï≤òÎ¶¨
    const isDualLastSlot = isDualFurniture && normalizedSlotIndex === indexing.columnCount - 2 && 
                            (spaceInfo.installType === 'freestanding' || 
                             ((spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') && !spaceInfo.wallConfig?.right));
    // ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä ÎßàÏßÄÎßâ Ïä¨Î°ØÏóê ÏûàÏúºÎ©¥ isLastSlot Ï≤òÎ¶¨Î•º ÌïòÏßÄ ÏïäÏùå
    const isLastSlotNoSurround = shouldProcessLastSlot && !isDualLastSlot;
    
    // ÎìÄÏñº Í∞ÄÍµ¨ Ï≤´Î≤àÏß∏ Ïä¨Î°Ø ÌäπÎ≥Ñ Ï≤òÎ¶¨ (ÏÉÅÌïòÎ∂ÄÏû• Ïú†Î¨¥ÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ Ï≤òÎ¶¨)
    if (isDualFirstSlot && !needsEndPanelAdjustment) {
      // ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä Ï≤´Î≤àÏß∏ Ïä¨Î°ØÏóê ÏûàÎäî Í≤ΩÏö∞: ÏôºÏ™ΩÎßå 18mm Ï§ÑÏûÑ
      const originalWidth = furnitureWidthMm;
      furnitureWidthMm = originalWidth - END_PANEL_THICKNESS; // ÏôºÏ™ΩÎßå 18mm Ï§ÑÏûÑ
      positionAdjustmentForEndPanel = (END_PANEL_THICKNESS / 2) * 0.01; // Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm Ïù¥Îèô
      
      }
    // ÎìÄÏñº Í∞ÄÍµ¨ ÎßàÏßÄÎßâ Ïä¨Î°Ø ÌäπÎ≥Ñ Ï≤òÎ¶¨ (ÏÉÅÌïòÎ∂ÄÏû• Ïú†Î¨¥ÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥ Ìï≠ÏÉÅ Ï≤òÎ¶¨)
    else if (isDualLastSlot && !needsEndPanelAdjustment) {
      // ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä ÎßàÏßÄÎßâ Ïä¨Î°ØÏóê ÏûàÎäî Í≤ΩÏö∞: Ïò§Î•∏Ï™ΩÎßå 18mm Ï§ÑÏûÑ
      const originalWidth = furnitureWidthMm;
      furnitureWidthMm = originalWidth - END_PANEL_THICKNESS; // Ïò§Î•∏Ï™ΩÎßå 18mm Ï§ÑÏûÑ
      positionAdjustmentForEndPanel = -(END_PANEL_THICKNESS / 2) * 0.01; // ÏôºÏ™ΩÏúºÎ°ú 9mm Ïù¥Îèô
      
      }
    // Ïã±Í∏Ä Í∞ÄÍµ¨ Ï≤´/ÎßàÏßÄÎßâ Ïä¨Î°Ø Ï≤òÎ¶¨ (ÏÉÅÌïòÎ∂ÄÏû•ÎèÑ Ìè¨Ìï®)
    else if ((isFirstSlotNoSurround || isLastSlotNoSurround)) {
      // ÌÇ§ÌÅ∞Ïû•Ïù¥ ÏïÑÎãàÍ±∞ÎÇò, ÌÇ§ÌÅ∞Ïû•Ïù¥ÏßÄÎßå ÏÉÅÌïòÎ∂ÄÏû•Í≥º Ïù∏Ï†ëÌïòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞
      if (!needsEndPanelAdjustment) {
        // Í∞ÄÍµ¨ ÎÑàÎπÑÎ•º 18mm Ï§ÑÏûÑ
        const originalWidth = furnitureWidthMm;
        furnitureWidthMm = originalWidth - END_PANEL_THICKNESS;
        
        // ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú ÏúÑÏπò Ï°∞Ï†ï
        // ÌÇ§ÌÅ∞Ïû•: ÏóîÎìúÌå®ÎÑêÏóêÏÑú Î©ÄÏñ¥ÏßÄÎäî Î∞©Ìñ•ÏúºÎ°ú 9mm Ïù¥Îèô (Ïπ®Î≤î Î∞©ÏßÄ)
        // ÏÉÅÌïòÎ∂ÄÏû•: ÏóîÎìúÌå®ÎÑê Ï™ΩÏúºÎ°ú 9mm Ïù¥Îèô (ÏóîÎìúÌå®ÎÑêÍ≥º Ìï®Íªò Ïù¥Îèô)
        if (isTallCabinet) {
          // ÌÇ§ÌÅ∞Ïû•ÏùÄ ÏóîÎìúÌå®ÎÑê Î∞òÎåÄÏ™ΩÏúºÎ°ú Ïù¥Îèô (Ïπ®Î≤î Î∞©ÏßÄ)
          if (isFirstSlotNoSurround) {
            // Ï≤´Î≤àÏß∏ Ïä¨Î°Ø: ÏôºÏ™ΩÏóê ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÏúºÎØÄÎ°ú Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm Ïù¥Îèô
            positionAdjustmentForEndPanel = (END_PANEL_THICKNESS / 2) * 0.01; // Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm
          } else if (isLastSlotNoSurround) {
            // ÎßàÏßÄÎßâ Ïä¨Î°Ø: Ïò§Î•∏Ï™ΩÏóê ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÏúºÎØÄÎ°ú ÏôºÏ™ΩÏúºÎ°ú 9mm Ïù¥Îèô
            positionAdjustmentForEndPanel = -(END_PANEL_THICKNESS / 2) * 0.01; // ÏôºÏ™ΩÏúºÎ°ú 9mm
          }
        } else {
          // ÏÉÅÌïòÎ∂ÄÏû•ÎèÑ ÏóîÎìúÌå®ÎÑê Î∞òÎåÄÏ™ΩÏúºÎ°ú Ïù¥Îèô (Í∞ÄÍµ¨+ÏóîÎìúÌå®ÎÑêÏù¥ Ïä¨Î°ØÏóê Îî± ÎßûÎèÑÎ°ù)
          if (isFirstSlotNoSurround) {
            // Ï≤´Î≤àÏß∏ Ïä¨Î°Ø: ÏôºÏ™ΩÏóê ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÏúºÎØÄÎ°ú Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm Ïù¥Îèô
            positionAdjustmentForEndPanel = (END_PANEL_THICKNESS / 2) * 0.01; // Ïò§Î•∏Ï™ΩÏúºÎ°ú 9mm
          } else if (isLastSlotNoSurround) {
            // ÎßàÏßÄÎßâ Ïä¨Î°Ø: Ïò§Î•∏Ï™ΩÏóê ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÏúºÎØÄÎ°ú ÏôºÏ™ΩÏúºÎ°ú 9mm Ïù¥Îèô
            positionAdjustmentForEndPanel = -(END_PANEL_THICKNESS / 2) * 0.01; // ÏôºÏ™ΩÏúºÎ°ú 9mm
          }
        }
        
        } else {
        // ÌÇ§ÌÅ∞Ïû•Ïù¥ ÏÉÅÌïòÎ∂ÄÏû•Í≥º Ïù∏Ï†ëÌïú Í≤ΩÏö∞Îäî ÏúÑÏóêÏÑú Ïù¥ÎØ∏ Ï≤òÎ¶¨ÌñàÏúºÎØÄÎ°ú
        // ÌïòÏßÄÎßå ÎÖ∏ÏÑúÎùºÏö¥Îìú Ï≤´/ÎßàÏßÄÎßâ Ïä¨Î°ØÏù¥Î©¥ Ï∂îÍ∞Ä ÏúÑÏπò Ï°∞Ï†ïÏù¥ ÌïÑÏöîÌï† Ïàò ÏûàÏùå
        // ÏÉÅÌïòÎ∂ÄÏû• ÏûêÏ≤¥Îäî Ï∂îÍ∞Ä Ï≤òÎ¶¨Í∞Ä ÌïÑÏöîÌï®
        if (isUpperCabinet || isLowerCabinet) {
          // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ï≤´/ÎßàÏßÄÎßâ Ïä¨Î°ØÏóê ÏûàÎäî Í≤ΩÏö∞ÎèÑ Ï≤òÎ¶¨
          const originalWidth = furnitureWidthMm;
          // Ïù¥ÎØ∏ ÌÇ§ÌÅ∞Ïû• ÎïåÎ¨∏Ïóê Ï°∞Ï†ïÎêú Í≤ΩÏö∞Í∞Ä ÏïÑÎãàÎ©¥ Ï°∞Ï†ï
          if (furnitureWidthMm === originalFurnitureWidthMm) {
            furnitureWidthMm = originalWidth - END_PANEL_THICKNESS;
            
            if (isFirstSlotNoSurround) {
              positionAdjustmentForEndPanel = (END_PANEL_THICKNESS / 2) * 0.01;
            } else if (isLastSlotNoSurround) {
              positionAdjustmentForEndPanel = -(END_PANEL_THICKNESS / 2) * 0.01;
            }
            
            }
        }
      }
    }
    
    // ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑúÎäî slotWidthsÍ∞Ä Ïù¥ÎØ∏ ÏóîÎìúÌå®ÎÑêÏùÑ Í≥†Î†§ÌïòÏó¨ Í≥ÑÏÇ∞ÎêòÏñ¥ ÏûàÏùå
    // FurnitureItemÏóêÏÑú Ï∂îÍ∞ÄÎ°ú Ï°∞Ï†ïÌïòÏßÄ ÏïäÏùå
    }

  // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏ Ï∂îÍ∞Ä Ï†úÍ±∞Îê®

  // ÌÇ§ÌÅ∞Ïû• ÎÜíÏù¥Îäî Ìï≠ÏÉÅ ÎÇ¥Í≤Ω ÎÜíÏù¥ÏôÄ ÎèôÏùº (ÎùÑÏõåÏÑú Î∞∞ÏπòÏôÄ Í¥ÄÍ≥ÑÏóÜÏù¥)
  // ÌÇ§ÌÅ∞Ïû•ÏùÄ Î∞îÎã•(ÎòêÎäî ÎùÑÏõÄ ÏúÑÏπò)Î∂ÄÌÑ∞ ÏãúÏûëÌï¥ÏÑú ÏÉÅÎ∂ÄÌîÑÎ†àÏûÑ ÌïòÎã®ÍπåÏßÄ
  
  // ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú ÏóîÎìúÌå®ÎÑê ÏúÑÏπò Ï°∞Ï†ïÏùÄ ÎÇòÏ§ëÏóê Ï†ÅÏö©
  
  let adjustedDepthMm = actualModuleData?.dimensions.depth || 0;

  // Í∞ÄÍµ¨ ÎÜíÏù¥Îäî Í∏∞Î≥∏Ï†ÅÏúºÎ°ú Î™®Îìà Îç∞Ïù¥ÌÑ∞Ïùò ÎÜíÏù¥ ÏÇ¨Ïö©
  let furnitureHeightMm = actualModuleData?.dimensions.height || 0;

  // Îã®ÎÇ¥Î¶º Íµ¨Í∞Ñ ÎÜíÏù¥ ÎîîÎ≤ÑÍπÖ
  if (placedModule.zone === 'dropped') {
    console.log('üü¢ FurnitureItem Îã®ÎÇ¥Î¶º Íµ¨Í∞Ñ Í∞ÄÍµ¨ ÎÜíÏù¥');
    console.log('  zone:', placedModule.zone);
    console.log('  moduleId:', placedModule.moduleId);
    console.log('  furnitureHeightMm:', furnitureHeightMm);
    console.log('  actualModuleDataHeight:', actualModuleData?.dimensions.height);
    console.log('  internalSpaceHeight:', internalSpace.height);
    console.log('  droppedCeilingEnabled:', spaceInfo.droppedCeiling?.enabled);
    console.log('  dropHeight:', spaceInfo.droppedCeiling?.dropHeight);
  }
  
  // Column C Í∞ÄÍµ¨ ÎÑàÎπÑ ÎîîÎ≤ÑÍπÖ
  if (slotInfo?.columnType === 'medium' && slotInfo?.allowMultipleFurniture) {
    }
  
  // ÎìÄÏñº Í∞ÄÍµ¨Ïù∏ÏßÄ ÌôïÏù∏ÌïòÏó¨ ÎèÑÏñ¥ ÌÅ¨Í∏∞ Í≤∞Ï†ï (Ïù¥ÎØ∏ ÏúÑÏóêÏÑú Í≥ÑÏÇ∞Îê®)
  // Îã®ÎÇ¥Î¶º Íµ¨Í∞ÑÏóêÏÑúÎäî zoneÎ≥Ñ columnWidth ÏÇ¨Ïö©
  let originalSlotWidthMm: number;
  
  // ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú ÎÅù Ïä¨Î°ØÏù∏ÏßÄ ÌôïÏù∏
  const isEndSlotInNoSurround = spaceInfo.surroundType === 'no-surround' && 
    normalizedSlotIndex !== undefined &&
    (normalizedSlotIndex === 0 || normalizedSlotIndex === indexing.columnCount - 1);
  
  if (placedModule.zone && spaceInfo.droppedCeiling?.enabled && zoneSlotInfo) {
    const targetZone = placedModule.zone === 'dropped' && zoneSlotInfo.dropped ? zoneSlotInfo.dropped : zoneSlotInfo.normal;
    const localIndex = localSlotIndex ?? placedModule.slotIndex ?? 0;
    
    // ÎßàÏßÄÎßâ Ïä¨Î°ØÏùò Í≤ΩÏö∞ Ïã§Ï†ú ÎÇ®ÏùÄ ÎÑàÎπÑ ÏÇ¨Ïö©
    if (isLastSlot && !isDualFurniture) {
      const usedWidth = targetZone.columnWidth * (targetZone.columnCount - 1);
      originalSlotWidthMm = targetZone.width - usedWidth;
    } else if (isDualFurniture && localIndex === targetZone.columnCount - 2) {
      // ÎßàÏßÄÎßâ-1 Ïä¨Î°ØÏùò ÎìÄÏñº Í∞ÄÍµ¨Ïù∏ Í≤ΩÏö∞
      const normalSlotWidth = targetZone.columnWidth;
      const lastSlotStart = targetZone.startX + ((targetZone.columnCount - 1) * targetZone.columnWidth);
      const lastSlotEnd = targetZone.startX + targetZone.width;
      const lastSlotWidth = lastSlotEnd - lastSlotStart;
      originalSlotWidthMm = normalSlotWidth + lastSlotWidth;
    } else if (isDualFurniture) {
      // ÎìÄÏñº Í∞ÄÍµ¨: Ïã§Ï†ú Ïä¨Î°Ø ÎÑàÎπÑÎì§Ïùò Ìï©Í≥Ñ ÏÇ¨Ïö©
      if (targetZone.slotWidths && localIndex >= 0 && localIndex < targetZone.slotWidths.length - 1) {
        originalSlotWidthMm = targetZone.slotWidths[localIndex] + targetZone.slotWidths[localIndex + 1];
      } else {
        // fallback: ÌèâÍ∑† ÎÑàÎπÑ * 2
        originalSlotWidthMm = targetZone.columnWidth * 2;
      }
    } else {
      // Ïã±Í∏Ä Í∞ÄÍµ¨: Ìï¥Îãπ Ïä¨Î°ØÏùò Ïã§Ï†ú ÎÑàÎπÑ ÏÇ¨Ïö©
      if (targetZone.slotWidths && localIndex >= 0 && localIndex < targetZone.slotWidths.length) {
        originalSlotWidthMm = targetZone.slotWidths[localIndex];
      } else {
        // fallback: ÌèâÍ∑† ÎÑàÎπÑ
        originalSlotWidthMm = targetZone.columnWidth;
      }
    }
    
  } else {
    // Îã®ÎÇ¥Î¶ºÏù¥ ÏóÜÎäî Í≤ΩÏö∞ÎèÑ ÎßàÏßÄÎßâ Ïä¨Î°Ø Ï≤òÎ¶¨
    if (isLastSlot && !isDualFurniture) {
      const usedWidth = indexing.columnWidth * (indexing.columnCount - 1);
      const totalInternalWidth = internalSpace.width;  // ÎÇ¥Í≤Ω Ï†ÑÏ≤¥ ÎÑàÎπÑ
      originalSlotWidthMm = totalInternalWidth - usedWidth;
    } else if (isDualFurniture) {
      // ÎìÄÏñº Í∞ÄÍµ¨: Ïã§Ï†ú Ïä¨Î°Ø ÎÑàÎπÑÎì§Ïùò Ìï©Í≥Ñ ÏÇ¨Ïö©
      if (indexing.slotWidths && normalizedSlotIndex !== undefined && normalizedSlotIndex < indexing.slotWidths.length - 1) {
        originalSlotWidthMm = indexing.slotWidths[normalizedSlotIndex] + indexing.slotWidths[normalizedSlotIndex + 1];
      } else {
        // fallback: ÌèâÍ∑† ÎÑàÎπÑ * 2
        originalSlotWidthMm = indexing.columnWidth * 2;
      }
    } else {
      // Ïã±Í∏Ä Í∞ÄÍµ¨: Ìï¥Îãπ Ïä¨Î°ØÏùò Ïã§Ï†ú ÎÑàÎπÑ ÏÇ¨Ïö©
      if (indexing.slotWidths && normalizedSlotIndex !== undefined && indexing.slotWidths[normalizedSlotIndex] !== undefined) {
        originalSlotWidthMm = indexing.slotWidths[normalizedSlotIndex];
      } else {
        // fallback: ÌèâÍ∑† ÎÑàÎπÑ
        originalSlotWidthMm = indexing.columnWidth;
      }
    }
  }
  
  // ÎèÑÏñ¥ ÌÅ¨Í∏∞ ÎîîÎ≤ÑÍπÖ
  if (placedModule.hasDoor) {
    let targetZoneSlotWidths = null;
    let targetZoneInfo = null;
    if (placedModule.zone && spaceInfo.droppedCeiling?.enabled) {
      const zoneInfo = ColumnIndexer.calculateZoneSlotInfo(spaceInfo, spaceInfo.customColumnCount);
      const targetZone = placedModule.zone === 'dropped' && zoneInfo.dropped ? zoneInfo.dropped : zoneInfo.normal;
      targetZoneSlotWidths = targetZone.slotWidths;
      targetZoneInfo = targetZone;
    }
    
    // ÎèÑÏñ¥ ÎÑàÎπÑÍ∞Ä Í∞ÄÍµ¨ ÎÑàÎπÑÏôÄ ÌÅ¨Í≤å Ï∞®Ïù¥ÎÇòÎäî Í≤ΩÏö∞ - Í∏∞Îë• Ïπ®Î≤î ÏãúÏôÄ ÏóîÎìúÌå®ÎÑê ÏûàÎäî Í≤ΩÏö∞ÏóêÎäî Î≥¥Ï†ïÌïòÏßÄ ÏïäÏùå
    // Í∏∞Îë• Ïπ®Î≤î Ïãú ÎèÑÏñ¥Îäî ÏõêÎûò Ïä¨Î°Ø ÎÑàÎπÑÎ•º Ïú†ÏßÄÌï¥Ïïº Ìï® (Ïª§Î≤ÑÎèÑÏñ¥)
    // ÌÇ§ÌÅ∞Ïû•Ïóê ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÏùÑ ÎïåÎèÑ ÎèÑÏñ¥Îäî ÏõêÎûò Ïä¨Î°Ø ÎÑàÎπÑÎ•º Ïú†ÏßÄÌï¥Ïïº Ìï®
    const widthDifference = Math.abs(originalSlotWidthMm - furnitureWidthMm);
    if (widthDifference > 20 && !isEditMode && !isDraggingThis && !(slotInfo && slotInfo.hasColumn) && !needsEndPanelAdjustment) {
      // Í∏∞Îë•Ïù¥ ÏóÜÍ≥† ÏóîÎìúÌå®ÎÑêÎèÑ ÏóÜÎäî Í≤ΩÏö∞ÏóêÎßå Í∞ÄÍµ¨ ÎÑàÎπÑÎ•º Í∏∞Ï§ÄÏúºÎ°ú ÎèÑÏñ¥ ÎÑàÎπÑ Î≥¥Ï†ï
      originalSlotWidthMm = furnitureWidthMm;
    } else if (needsEndPanelAdjustment) {
      }
  }
  
  // Î≤ΩÏóÜÏùå + ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú Î≤ΩÏù¥ ÏóÜÎäî Ï™ΩÏùò Í∞ÄÍµ¨Îäî ÎèÑÏñ¥Í∞Ä ÏóîÎìúÌå®ÎÑêÏùÑ ÎçÆÎèÑÎ°ù ÌôïÏû•
  let doorWidthExpansion = 0;
  let doorWidth = actualModuleData?.dimensions.width || 0;
  let doorXOffset = 0;
  let originalSlotWidthForDoor = originalSlotWidthMm;
  
  // ÎÖ∏ÏÑúÎùºÏö¥Îìú ÏóîÎìúÌå®ÎÑêÏù¥ ÏûàÎäî Ïä¨Î°Ø ÎèÑÏñ¥ ÌôïÏû• Ï≤òÎ¶¨
  // hasLeftWallÍ≥º hasRightWallÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ†Ïñ∏Îê® (809-810Ï§Ñ)
  if (spaceInfo.surroundType === 'no-surround' && 
      (spaceInfo.installType === 'freestanding' || 
       spaceInfo.installType === 'semistanding' || 
       spaceInfo.installType === 'semi-standing') && 
      normalizedSlotIndex !== undefined) {
    
    // ÌîÑÎ¶¨Ïä§ÌÉ†Îî©ÏóêÏÑúÎäî ÏñëÏ™Ω Î™®Îëê, ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©ÏóêÏÑúÎäî Î≤ΩÏù¥ ÏóÜÎäî Ï™ΩÎßå Ï≤òÎ¶¨
    let shouldExpandFirstSlot = false;
    let shouldExpandLastSlot = false;
    
    if (spaceInfo.installType === 'freestanding') {
      // ÌîÑÎ¶¨Ïä§ÌÉ†Îî©: ÏñëÏ™Ω Î™®Îëê ÌôïÏû•
      shouldExpandFirstSlot = normalizedSlotIndex === 0;
      shouldExpandLastSlot = isLastSlot;
    } else if (spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') {
      // ÏÑ∏ÎØ∏Ïä§ÌÉ†Îî©: Î≤ΩÏù¥ ÏóÜÎäî Ï™ΩÎßå ÌôïÏû•
      shouldExpandFirstSlot = normalizedSlotIndex === 0 && !spaceInfo.wallConfig?.left;
      shouldExpandLastSlot = isLastSlot && !spaceInfo.wallConfig?.right;
    }

    // ÎìÄÏñº Í∞ÄÍµ¨Ïùò Í≤ΩÏö∞: Ï≤´Î≤àÏß∏ Ïä¨Î°ØÏóê ÏûàÍ≥†, ÏôºÏ™ΩÏóê Î≤ΩÏù¥ ÏóÜÏúºÎ©¥ Ï≤òÎ¶¨
    const isDualFirstSlotDoor = isDualFurniture && normalizedSlotIndex === 0 && 
                            (spaceInfo.installType === 'freestanding' || 
                             ((spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') && !spaceInfo.wallConfig?.left));

    const isFirstSlotFreestanding = shouldExpandFirstSlot && !isDualFirstSlotDoor;
    const isLastSlotFreestanding = shouldExpandLastSlot;
    const isDualLastSlot = isDualFurniture && normalizedSlotIndex === indexing.columnCount - 2 && 
                            (spaceInfo.installType === 'freestanding' || 
                             ((spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') && !spaceInfo.wallConfig?.right));
    
    // Ï≤´Î≤àÏß∏ ÎòêÎäî ÎßàÏßÄÎßâ Ïä¨Î°Ø: ÎèÑÏñ¥ ÌôïÏû•
    if (isFirstSlotFreestanding || isLastSlotFreestanding || isDualFirstSlotDoor || isDualLastSlot) {
      if (isDualFurniture && isDualFirstSlotDoor) {
        // ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä Ï≤´Î≤àÏß∏ Ïä¨Î°ØÏóê ÏûàÎäî Í≤ΩÏö∞: ÏôºÏ™Ω ÎèÑÏñ¥Îßå 18mm ÌôïÏû•
        doorWidthExpansion = END_PANEL_THICKNESS; // 18mm ÌôïÏû•
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        doorXOffset = needsEndPanelAdjustment ? positionAdjustmentForEndPanel : -(END_PANEL_THICKNESS / 2) * 0.01;
        
        } else if (isDualFurniture && isDualLastSlot) {
        // ÎìÄÏñº Í∞ÄÍµ¨Í∞Ä ÎßàÏßÄÎßâ Ïä¨Î°ØÏóê ÏûàÎäî Í≤ΩÏö∞: Ïò§Î•∏Ï™Ω ÎèÑÏñ¥Îßå 18mm ÌôïÏû•
        doorWidthExpansion = END_PANEL_THICKNESS; // 18mm ÌôïÏû•
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        doorXOffset = needsEndPanelAdjustment ? positionAdjustmentForEndPanel : (END_PANEL_THICKNESS / 2) * 0.01;
        
        } else {
        // Ïã±Í∏Ä Í∞ÄÍµ¨ ÎòêÎäî ÎìÄÏñº Í∞ÄÍµ¨ Ï≤´Î≤àÏß∏ Ïä¨Î°Ø: ÌïúÏ™ΩÎßå 18mm ÌôïÏû•
        doorWidthExpansion = END_PANEL_THICKNESS;
        
        // ÎèÑÏñ¥ ÏúÑÏπòÎäî ÌôïÏû•Îêú Î∞©Ìñ•Í≥º Î∞òÎåÄÎ°ú Ïù¥Îèô (Í∞ÄÍµ¨ ÏúÑÏπòÏóê ÎßûÏ∂§)
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ ÏúÑÏπò Ï°∞Ï†ï ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        if (isFirstSlotFreestanding) {
          doorXOffset = needsEndPanelAdjustment ? positionAdjustmentForEndPanel : -(END_PANEL_THICKNESS / 2) * 0.01;
        } else {
          doorXOffset = needsEndPanelAdjustment ? positionAdjustmentForEndPanel : (END_PANEL_THICKNESS / 2) * 0.01;
        }
        
        }
    }
    
    // Î≤Ω ÏúÑÏπò ÏÑ§Ï†ï (freestandingÏùÄ ÏñëÏ™Ω Î≤Ω ÏóÜÏùå) - hasLeftWall, hasRightWallÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú ÏÑ§Ï†ïÎê®
  } else if (spaceInfo.surroundType === 'no-surround' && normalizedSlotIndex !== undefined) {
    const isFirstSlot = normalizedSlotIndex === 0;
    const isLastSlotForDual = isDualFurniture && normalizedSlotIndex === indexing.columnCount - 2;
    const isLastSlotForSingle = !isDualFurniture && isLastSlot;
    
    // Î≤Ω ÏúÑÏπò ÌôïÏù∏
    if (spaceInfo.installType === 'freestanding') {
      // Î≤ΩÏóÜÏùå Î™®Îìú: ÏñëÏ™Ω Î™®Îëê Î≤Ω ÏóÜÏùå - hasLeftWall, hasRightWallÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú falseÎ°ú ÏÑ§Ï†ïÎê®
    } else if (spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') {
      // Î∞òÎ≤Ω Î™®Îìú: hasLeftWall, hasRightWallÏùÄ Ïù¥ÎØ∏ wallConfigÏóêÏÑú ÏÑ§Ï†ïÎê®
    }
    
    if (isFirstSlot && !hasLeftWall) {
      // ÏôºÏ™Ω Î≤ΩÏù¥ ÏóÜÎäî Ï≤´Î≤àÏß∏ Ïä¨Î°Ø
      if (isDualFurniture) {
        // ÎìÄÏñºÏû•: Îëê Ïä¨Î°Ø Î™®ÎëêÏùò ÎèÑÏñ¥Î•º ÌôïÏû•
        const firstSlotReduction = indexing.slotWidths?.[0] ? indexing.columnWidth - indexing.slotWidths[0] : 0;
        const secondSlotReduction = indexing.slotWidths?.[1] ? indexing.columnWidth - indexing.slotWidths[1] : 0;
        // Îëê Ïä¨Î°ØÏùò Ï¥ù ÎÑàÎπÑÏóê 18mm Ï∂îÍ∞Ä
        doorWidthExpansion = END_PANEL_THICKNESS + firstSlotReduction + secondSlotReduction;
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ positionAdjustmentForEndPanel Í∞í ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        doorXOffset = needsEndPanelAdjustment && isNoSurroundFirstSlot ? 
          positionAdjustmentForEndPanel : -(END_PANEL_THICKNESS / 2) * 0.01;
        
        } else {
        // Ïã±Í∏ÄÏû•: 18mm ÌôïÏû•, ÏÉÅÌïòÎ∂ÄÏû• Ïù∏Ï†ë Ïãú ÏúÑÏπò Ï°∞Ï†ï
        doorWidthExpansion = END_PANEL_THICKNESS;
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ positionAdjustmentForEndPanel Í∞í ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        doorXOffset = needsEndPanelAdjustment && isNoSurroundFirstSlot ? 
          positionAdjustmentForEndPanel : -(END_PANEL_THICKNESS / 2) * 0.01;
        
        }
      
    } else if ((isLastSlotForDual || isLastSlotForSingle) && !hasRightWall) {
      // Ïò§Î•∏Ï™Ω Î≤ΩÏù¥ ÏóÜÎäî ÎßàÏßÄÎßâ Ïä¨Î°Ø
      if (isDualFurniture && isLastSlotForDual) {
        // ÎìÄÏñºÏû•: Îëê Ïä¨Î°Ø Î™®ÎëêÏùò ÎèÑÏñ¥Î•º ÌôïÏû•
        const lastSlotIndex = indexing.columnCount - 1;
        const beforeLastSlotIndex = indexing.columnCount - 2;
        const lastSlotReduction = indexing.slotWidths?.[lastSlotIndex] ? 
          indexing.columnWidth - indexing.slotWidths[lastSlotIndex] : 0;
        const beforeLastSlotReduction = indexing.slotWidths?.[beforeLastSlotIndex] ? 
          indexing.columnWidth - indexing.slotWidths[beforeLastSlotIndex] : 0;
        // Îëê Ïä¨Î°ØÏùò Ï¥ù ÎÑàÎπÑÏóê 18mm Ï∂îÍ∞Ä
        doorWidthExpansion = END_PANEL_THICKNESS + lastSlotReduction + beforeLastSlotReduction;
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ positionAdjustmentForEndPanel Í∞í ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        doorXOffset = needsEndPanelAdjustment && isNoSurroundLastSlot ? 
          positionAdjustmentForEndPanel : (END_PANEL_THICKNESS / 2) * 0.01;
        
        } else {
        // Ïã±Í∏ÄÏû•: 18mm ÌôïÏû•, ÏÉÅÌïòÎ∂ÄÏû• Ïù∏Ï†ë Ïãú ÏúÑÏπò Ï°∞Ï†ï
        doorWidthExpansion = END_PANEL_THICKNESS;
        // ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ Ïù∏Ï†ëÌïú Í≤ΩÏö∞ positionAdjustmentForEndPanel Í∞í ÏÇ¨Ïö©, ÏïÑÎãàÎ©¥ Í∏∞Î≥∏ 9mm Ïù¥Îèô
        doorXOffset = needsEndPanelAdjustment && isNoSurroundLastSlot ? 
          positionAdjustmentForEndPanel : (END_PANEL_THICKNESS / 2) * 0.01;
        
        }
    }
  }
  
  // ÎèÑÏñ¥Îäî Ìï≠ÏÉÅ ÏõêÎûò Ïä¨Î°Ø Ï§ëÏã¨Ïóê Í≥†Ï†ï (Í∞ÄÍµ¨ Ïù¥ÎèôÍ≥º Î¨¥Í¥Ä)
  let originalSlotCenterX: number;
  
  // zoneÏù¥ ÏûàÎäî Í≤ΩÏö∞ zoneÎ≥Ñ ÏúÑÏπò Í≥ÑÏÇ∞
  if (placedModule.zone && spaceInfo.droppedCeiling?.enabled) {
    const zoneInfo = ColumnIndexer.calculateZoneSlotInfo(spaceInfo, spaceInfo.customColumnCount);
    const targetZone = placedModule.zone === 'dropped' && zoneInfo.dropped ? zoneInfo.dropped : zoneInfo.normal;
    
    // zone ÎÇ¥ Î°úÏª¨ Ïä¨Î°Ø Ïù∏Îç±Ïä§ ÏÇ¨Ïö©
    const localSlotIndexForZone = localSlotIndex ?? placedModule.slotIndex ?? 0;

    if (isDualFurniture && localSlotIndexForZone < targetZone.columnCount - 1) {
      // ÎìÄÏñº Í∞ÄÍµ¨: Îëê Ïä¨Î°ØÏùò Ï§ëÍ∞ÑÏ†ê
      let leftSlotX, rightSlotX;

      // ÎßàÏßÄÎßâ-1 Ïä¨Î°ØÏù¥ ÎìÄÏñºÏù∏ Í≤ΩÏö∞ ÎßàÏßÄÎßâ Ïä¨Î°ØÏùò Ïã§Ï†ú ÎÑàÎπÑ Í≥†Î†§
      if (localSlotIndexForZone === targetZone.columnCount - 2) {
        leftSlotX = targetZone.startX + (localSlotIndexForZone * targetZone.columnWidth) + (targetZone.columnWidth / 2);
        const lastSlotStart = targetZone.startX + ((localSlotIndexForZone + 1) * targetZone.columnWidth);
        const lastSlotEnd = targetZone.startX + targetZone.width;
        rightSlotX = (lastSlotStart + lastSlotEnd) / 2;
      } else {
        leftSlotX = targetZone.startX + (localSlotIndexForZone * targetZone.columnWidth) + (targetZone.columnWidth / 2);
        rightSlotX = targetZone.startX + ((localSlotIndexForZone + 1) * targetZone.columnWidth) + (targetZone.columnWidth / 2);
      }
      originalSlotCenterX = ((leftSlotX + rightSlotX) / 2) * 0.01; // mm to Three.js units
    } else {
      // Ïã±Í∏Ä Í∞ÄÍµ¨
      // targetZoneÏùò threeUnitPositionsÎÇò Í≥ÑÏÇ∞Îêú ÏúÑÏπò ÏÇ¨Ïö©
      const zoneIndexing = placedModule.zone === 'dropped' && indexing.zones?.dropped 
        ? indexing.zones.dropped 
        : (placedModule.zone === 'normal' && indexing.zones?.normal ? indexing.zones.normal : indexing);
      
      if (zoneIndexing.threeUnitPositions && zoneIndexing.threeUnitPositions[localSlotIndexForZone] !== undefined) {
        originalSlotCenterX = zoneIndexing.threeUnitPositions[localSlotIndexForZone];
      } else {
        // fallback: Í∏∞Î≥∏ Í≥ÑÏÇ∞ ÏÇ¨Ïö©
        originalSlotCenterX = (targetZone.startX + (localSlotIndexForZone * targetZone.columnWidth) + (targetZone.columnWidth / 2)) * 0.01;
      }
    }
  } else {
    // zoneÏù¥ ÏóÜÎäî Í≤ΩÏö∞ Í∏∞Ï°¥ Î°úÏßÅ
    // ÎìÄÏñº Í∞ÄÍµ¨Îäî Îëê Ïä¨Î°ØÏùò Ï§ëÍ∞Ñ ÏúÑÏπò Í≥ÑÏÇ∞
    if (isDualFurniture && normalizedSlotIndex !== undefined) {
      // ÎìÄÏñº Í∞ÄÍµ¨: Îëê Ïä¨Î°ØÏùò Ï§ëÍ∞Ñ ÏúÑÏπò
      const leftSlotX = indexing.threeUnitPositions[normalizedSlotIndex];
      const rightSlotX = indexing.threeUnitPositions[normalizedSlotIndex + 1] || leftSlotX;
      originalSlotCenterX = (leftSlotX + rightSlotX) / 2;
      
      } else if (normalizedSlotIndex !== undefined && indexing.threeUnitPositions[normalizedSlotIndex] !== undefined) {
      // Ïã±Í∏Ä Í∞ÄÍµ¨: Ïä¨Î°Ø Ï§ëÏã¨ ÏúÑÏπò
      originalSlotCenterX = indexing.threeUnitPositions[normalizedSlotIndex]; // Ïã§Ï†ú Ïä¨Î°Ø Ï§ëÏã¨ ÏúÑÏπò
    } else {
      // Ïä¨Î°Ø Ïù∏Îç±Ïä§Í∞Ä ÏóÜÎäî Í≤ΩÏö∞, ÎìÄÏñº Í∞ÄÍµ¨ÎùºÎ©¥ ÎìÄÏñº ÏúÑÏπòÏóêÏÑú Ï∞æÍ∏∞
      
      if (isDualFurniture && indexing.threeUnitDualPositions) {
        // ÎìÄÏñº Í∞ÄÍµ¨Ïùò Í≤ΩÏö∞ ÎìÄÏñº ÏúÑÏπòÏóêÏÑú Í∞ÄÏû• Í∞ÄÍπåÏö¥ ÏúÑÏπò Ï∞æÍ∏∞
        const closestDualIndex = indexing.threeUnitPositions.findIndex(pos => 
          Math.abs(pos - placedModule.position.x) < 0.2 // 20cm Ïò§Ï∞® ÌóàÏö©
        );
        if (closestDualIndex >= 0) {
          originalSlotCenterX = indexing.threeUnitDualPositions[closestDualIndex];
        } else {
          // Î∞±ÏóÖ: ÌòÑÏû¨ ÏúÑÏπò ÏÇ¨Ïö© (Í∏∞Ï°¥ ÎèôÏûë)
          originalSlotCenterX = placedModule.position.x;
        }
      } else {
        // Ïã±Í∏Ä Í∞ÄÍµ¨Ïùò Í≤ΩÏö∞ Ïã±Í∏Ä ÏúÑÏπòÏóêÏÑú Í∞ÄÏû• Í∞ÄÍπåÏö¥ ÏúÑÏπò Ï∞æÍ∏∞
        const closestSingleIndex = indexing.threeUnitPositions.findIndex(pos => 
          Math.abs(pos - placedModule.position.x) < 0.2 // 20cm Ïò§Ï∞® ÌóàÏö©
        );
        if (closestSingleIndex >= 0) {
          originalSlotCenterX = indexing.threeUnitPositions[closestSingleIndex];
        } else {
          // Î∞±ÏóÖ: ÌòÑÏû¨ ÏúÑÏπò ÏÇ¨Ïö© (Í∏∞Ï°¥ ÎèôÏûë)
          originalSlotCenterX = placedModule.position.x;
        }
      }
    }
  }
  
  // ÎßàÏßÄÎßâ Ïä¨Î°ØÎèÑ ÏùºÎ∞ò Ïä¨Î°ØÍ≥º ÎèôÏùºÌïòÍ≤å Ï≤òÎ¶¨ (ÌäπÎ≥Ñ Ï≤òÎ¶¨ Ï†úÍ±∞)
  // threeUnitPositionsÍ∞Ä Ïù¥ÎØ∏ Ïò¨Î∞îÎ•∏ ÏúÑÏπòÎ•º Í∞ÄÏßÄÍ≥† ÏûàÏùå
  
  // ÎßàÏßÄÎßâ Ïä¨Î°ØÏùÄ Í∏∞Îë• Ï≤òÎ¶¨ Ï†úÏô∏
  if (!isFurnitureDragging && !isLastSlot && slotInfo && slotInfo.hasColumn && slotInfo.column) {
    // Í∏∞Îë• ÌÉÄÏûÖÏóê Îî∞Î•∏ Ï≤òÎ¶¨ Î∞©Ïãù ÌôïÏù∏
    const columnProcessingMethod = slotInfo.columnProcessingMethod || 'width-adjustment';
    
    const slotWidthM = indexing.columnWidth * 0.01; // mm to meters
    const originalSlotBounds = {
      left: originalSlotCenterX - slotWidthM / 2,
      right: originalSlotCenterX + slotWidthM / 2,
      center: originalSlotCenterX
    };
    
    // Í∏∞Îë• Ïπ®Î≤îÏóê Îî∞Î•∏ ÏÉàÎ°úÏö¥ Í∞ÄÍµ¨ Í≤ΩÍ≥Ñ Í≥ÑÏÇ∞
    const furnitureBounds = calculateFurnitureBounds(slotInfo, originalSlotBounds, spaceInfo);
    
    // Í∏∞Îë• A(deep) Îì±Ïóê ÎåÄÌï¥ Ìè≠ Ï°∞Ï†ï Î∞©Ïãù Ï†ÅÏö© (Í∏∞Îë• CÎäî Ï†úÏô∏ - ÍπäÏù¥ Ï°∞Ï†ï)
    // Í∏∞Îë• Ïπ®Î≤î ÏãúÏóêÎäî Í∞ÄÍµ¨ Ìè≠ÏùÑ Ï°∞Ï†ïÌïòÏó¨ Í∏∞Îë•Í≥º Í≤πÏπòÏßÄ ÏïäÎèÑÎ°ù Ìï®
    if (columnProcessingMethod === 'width-adjustment') {
      // ÏùºÎ∞ò Ìè≠ Ï°∞Ï†ï Î∞©Ïãù: Í∞ÄÍµ¨ ÌÅ¨Í∏∞ÏôÄ ÏúÑÏπò Ï°∞Ï†ï
      // Í∏∞Îë• Ïπ®Î≤î ÏãúÏóêÎäî Ìï≠ÏÉÅ Ìè≠ Ï°∞Ï†ï
      furnitureWidthMm = furnitureBounds.renderWidth;
      adjustedPosition = {
        ...adjustedPosition, // adjustedPosition ÏÇ¨Ïö©ÌïòÏó¨ ÏÉÅÎ∂ÄÏû• Y ÏúÑÏπò Î≥¥Ï°¥
        x: furnitureBounds.center + (needsEndPanelAdjustment ? positionAdjustmentForEndPanel : 0)
      };
      
      // Í∏∞Îë• Î≥ÄÍ≤ΩÏúºÎ°ú Ïù∏Ìïú Ìè≠ Ï°∞Ï†ïÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ Ïã§ÏãúÍ∞Ñ ÏóÖÎç∞Ïù¥Ìä∏
      if (!isFurnitureDragging && (
        placedModule.adjustedWidth !== furnitureWidthMm || 
        placedModule.position.x !== adjustedPosition.x
      )) {
        updatePlacedModule(placedModule.id, {
          adjustedWidth: furnitureWidthMm,
          position: adjustedPosition,
          columnSlotInfo: {
            hasColumn: true,
            columnId: slotInfo.column?.id,
            columnPosition: slotInfo.columnPosition,
            availableWidth: slotInfo.availableWidth,
            adjustedWidth: slotInfo.adjustedWidth,
            intrusionDirection: slotInfo.intrusionDirection,
            furniturePosition: slotInfo.furniturePosition
          }
        });
      }
    } else if (columnProcessingMethod === 'depth-adjustment') {
      // ÍπäÏù¥ Ï°∞Ï†ï Î∞©Ïãù (Í∏∞Îë• C(300mm) Î∞è ÏñïÏùÄ Í∏∞Îë•)
      const slotDepth = 730; // Ïä¨Î°Ø Í∏∞Î≥∏ ÍπäÏù¥
      const columnDepth = slotInfo.column.depth;
      const remainingDepth = slotDepth - columnDepth;
      
      // ÎìÄÏñºÏ∫êÎπÑÎãõÏù∏ÏßÄ ÌôïÏù∏
      // isDualFurnitureÎäî Ïù¥ÎØ∏ ÏúÑÏóêÏÑú Í≥ÑÏÇ∞Îê®
      
     if (isDualFurniture && remainingDepth <= 300) {
        // ÎìÄÏñºÏ∫êÎπÑÎãõÏù¥Í≥† ÎÇ®ÏùÄ ÍπäÏù¥Í∞Ä 300mm Ïù¥ÌïòÎ©¥ Î∞∞Ïπò Î∂àÍ∞Ä
        // Î∞∞Ïπò Î∂àÍ∞Ä Ï≤òÎ¶¨ (ÏõêÎûò ÍπäÏù¥ Ïú†ÏßÄÌïòÍ±∞ÎÇò Îã§Î•∏ Ï≤òÎ¶¨)
        adjustedDepthMm = actualModuleData?.dimensions.depth || 0;
      } else {
        // Î∞∞Ïπò Í∞ÄÎä• - ÍπäÏù¥Îßå Ï°∞Ï†ï, Ìè≠Í≥º ÏúÑÏπòÎäî Í∑∏ÎåÄÎ°ú
        adjustedDepthMm = remainingDepth;
      }
    }
  }

  const shouldResetCustomDepth = !isFurnitureDragging && slotInfo && !slotInfo.hasColumn && !!placedModule.customDepth;

  if (slotInfo && !slotInfo.hasColumn && placedModule.customDepth) {
    // Í∏∞Îë•Ïù¥ Ïä¨Î°ØÏùÑ Î≤óÏñ¥ÎÇ¨ÏùÑ Îïå customDepth Ï†úÍ±∞
    // ÍπäÏù¥Î•º ÏõêÎûòÎåÄÎ°ú Î≥µÍµ¨
    adjustedDepthMm = actualModuleData?.dimensions.depth || 0;
  }

  const shouldResetWidth = !isFurnitureDragging && slotInfo && !slotInfo.hasColumn &&
    (placedModule.adjustedWidth !== undefined || placedModule.columnSlotInfo !== undefined);

  if (slotInfo && !slotInfo.hasColumn && (placedModule.adjustedWidth || placedModule.columnSlotInfo)) {
    // Í∏∞Îë•Ïù¥ Ïä¨Î°ØÏùÑ Î≤óÏñ¥ÎÇ¨ÏùÑ Îïå Ìè≠ÎèÑ ÏõêÏÉÅÎ≥µÍµ¨
    // Ìè≠ÏùÑ ÏõêÎûòÎåÄÎ°ú Î≥µÍµ¨
    furnitureWidthMm = actualModuleData?.dimensions.width || 0;
    
    // ÏúÑÏπòÎèÑ Ïä¨Î°Ø Ï§ëÏã¨ÏúºÎ°ú Î≥µÍµ¨
    const slotCenterX = (normalizedSlotIndex !== undefined && indexing.threeUnitPositions[normalizedSlotIndex] !== undefined)
      ? indexing.threeUnitPositions[normalizedSlotIndex]
      : placedModule.position.x;
    adjustedPosition = {
      ...adjustedPosition, // adjustedPosition ÏÇ¨Ïö©ÌïòÏó¨ ÏÉÅÎ∂ÄÏû• Y ÏúÑÏπò Î≥¥Ï°¥
      x: slotCenterX + (needsEndPanelAdjustment ? positionAdjustmentForEndPanel : 0)
    };
  }
  
  // Í∞ÄÍµ¨ ÏπòÏàòÎ•º Three.js Îã®ÏúÑÎ°ú Î≥ÄÌôò
  const width = mmToThreeUnits(furnitureWidthMm);
  
  // Í∞ÄÍµ¨ ÎÜíÏù¥ Í≥ÑÏÇ∞: actualModuleData.dimensions.heightÍ∞Ä Ïù¥ÎØ∏ Ïò¨Î∞îÎ•∏ ÎÜíÏù¥Î•º Í∞ÄÏßÄÍ≥† ÏûàÏùå
  // generateShelvingModulesÏóêÏÑú internalSpace.heightÎ•º Í∏∞Î∞òÏúºÎ°ú Í∞ÄÍµ¨Î•º ÏÉùÏÑ±ÌñàÍ∏∞ ÎïåÎ¨∏
  // Ï∂îÍ∞Ä Ï°∞Ï†ï Î∂àÌïÑÏöî
  
  const height = mmToThreeUnits(furnitureHeightMm);
  
  // Îã®ÎÇ¥Î¶º Íµ¨Í∞Ñ ÏµúÏ¢Ö ÎÜíÏù¥ ÎîîÎ≤ÑÍπÖ
  if (placedModule.zone === 'dropped') {
    }
  
  // ÍπäÏù¥ Í≥ÑÏÇ∞: customDepth Ïö∞ÏÑ†, Í∏∞Îë• Ï∂©ÎèåÎ°ú Ï°∞Ï†ïÎêú ÍπäÏù¥, Í∏∞Î≥∏ ÍπäÏù¥ Ïàú
  const moduleDepth = actualModuleData?.dimensions?.depth || 0;
  const actualDepthMm = placedModule.customDepth || (adjustedDepthMm !== moduleDepth ? adjustedDepthMm : moduleDepth);
  const depth = mmToThreeUnits(actualDepthMm);
  
  // Column C ÍπäÏù¥ ÎîîÎ≤ÑÍπÖ
  if (isColumnC && slotInfo) {
    }

  // ÎèÑÏñ¥ ÎëêÍªò (20mm)
  const doorThicknessMm = 20;
  const doorThickness = mmToThreeUnits(doorThicknessMm);

  // Room.tsxÏôÄ ÎèôÏùºÌïú ZÏ∂ï ÏúÑÏπò Í≥ÑÏÇ∞
  const panelDepthMm = 1500; // Ï†ÑÏ≤¥ Í≥µÍ∞Ñ ÍπäÏù¥
  const furnitureDepthMm = 600; // Í∞ÄÍµ¨ Í≥µÍ∞Ñ ÍπäÏù¥
  const panelDepth = mmToThreeUnits(panelDepthMm);
  const furnitureDepth = mmToThreeUnits(furnitureDepthMm);
  
  // Room.tsxÏôÄ ÎèôÏùºÌïú Í≥ÑÏÇ∞: Îí∑Î≤ΩÏóêÏÑú 600mmÎßå ÎÇòÏò§ÎèÑÎ°ù
  const zOffset = -panelDepth / 2; // Í≥µÍ∞Ñ Î©îÏâ¨Ïö© ÍπäÏù¥ Ï§ëÏïô
  const furnitureZOffset = zOffset + (panelDepth - furnitureDepth) / 2; // Îí∑Î≤ΩÏóêÏÑú 600mm
  
  // ZÏ∂ï ÏúÑÏπò Í≥ÑÏÇ∞ - Í∏∞Îë• CÍ∞Ä ÏûàÏñ¥ÎèÑ ÏúÑÏπòÎäî Î≥ÄÍ≤ΩÌïòÏßÄ ÏïäÏùå
  const furnitureZ = furnitureZOffset + furnitureDepth/2 - doorThickness - depth/2;
  
  // Í∏∞Îë• C ÎîîÎ≤ÑÍπÖ - ÏúÑÏπòÎäî Ïú†ÏßÄ, ÍπäÏù¥Îßå Ï°∞Ï†ï
  if (adjustedDepthMm !== moduleDepth && slotInfo?.hasColumn) {
    }
  
  // Í∏∞Îë• CÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ ÎîîÎ≤ÑÍπÖ
  if (slotInfo?.hasColumn && slotInfo.columnProcessingMethod === 'depth-adjustment' && slotInfo.column) {
    }

  // ÏÉâÏÉÅ ÏÑ§Ï†ï: ÎìúÎûòÍ∑∏ Ï§ëÏùº ÎïåÎßå ÏÉâÏÉÅ Ï†ÑÎã¨, Îã§Î•∏ ÏÉÅÌÉúÏóêÏÑúÎäî MaterialPanel ÏÉâÏÉÅ ÏÇ¨Ïö©
  const furnitureColor = isDraggingThis ? '#66ff66' : undefined;
  
  // Í∏∞Îë• Ïπ®Î≤î ÏÉÅÌô©Ïóê Îî∞Î•∏ ÏµúÏ†Å ÌûåÏßÄ Î∞©Ìñ• Í≥ÑÏÇ∞ (ÎìúÎûòÍ∑∏ Ï§ëÏù¥ ÏïÑÎãê ÎïåÎßå)
  let optimalHingePosition = placedModule.hingePosition || 'right';
  
  // ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú Ïª§Î≤ÑÎèÑÏñ¥Ïùò ÌûåÏßÄ ÏúÑÏπò Ï°∞Ï†ï
  if (spaceInfo.surroundType === 'no-surround' && normalizedSlotIndex !== undefined) {
    const isFirstSlot = normalizedSlotIndex === 0;
    // isLastSlotÏùÄ Ïù¥ÎØ∏ ÏúÑÏóêÏÑú Ï†ïÏùòÎê®
    
    if (spaceInfo.installType === 'freestanding') {
      if (isFirstSlot) {
        // Ï≤´Î≤àÏß∏ Ïä¨Î°Ø: ÌûåÏßÄÍ∞Ä Ïò§Î•∏Ï™ΩÏóê ÏûàÏñ¥Ïïº ÏôºÏ™Ω ÏóîÎìúÌå®ÎÑêÏùÑ ÎçÆÏùå
        optimalHingePosition = 'right';
        } else if (isLastSlot) {
        // ÎßàÏßÄÎßâ Ïä¨Î°Ø: ÌûåÏßÄÍ∞Ä ÏôºÏ™ΩÏóê ÏûàÏñ¥Ïïº Ïò§Î•∏Ï™Ω ÏóîÎìúÌå®ÎÑêÏùÑ ÎçÆÏùå
        optimalHingePosition = 'left';
        }
    } else if (spaceInfo.installType === 'semistanding' || spaceInfo.installType === 'semi-standing') {
      if (isFirstSlot && !spaceInfo.wallConfig?.left) {
        optimalHingePosition = 'right';
      } else if (isLastSlot && !spaceInfo.wallConfig?.right) {
        optimalHingePosition = 'left';
      }
    }
  } else if (!isFurnitureDragging && slotInfo && slotInfo.hasColumn) {
    // Í∏∞Îë• Ïπ®Î≤î ÏÉÅÌô©Ïóê Îî∞Î•∏ ÌûåÏßÄ Ï°∞Ï†ï
    optimalHingePosition = calculateOptimalHingePosition(slotInfo);
    }

  // Column C Í∏∞Îë• Ïïû Í∞ÄÍµ¨Ïù∏ÏßÄ ÌôïÏù∏
  const isColumnCFront = isColumnC && placedModule.columnSlotInfo?.spaceType === 'front';
  
  // adjustedPositionÏùÑ memoizeÌïòÏó¨ Ï∞∏Ï°∞ ÏïàÏ†ïÏÑ± ÌôïÎ≥¥
  const memoizedAdjustedPosition = React.useMemo(() => ({
    x: adjustedPosition.x,
    y: adjustedPosition.y,
    z: adjustedPosition.z
  }), [adjustedPosition.x, adjustedPosition.y, adjustedPosition.z]);

  React.useEffect(() => {
    if (!shouldResetCustomDepth) return;
    updatePlacedModule(placedModule.id, { customDepth: undefined });
  }, [shouldResetCustomDepth, placedModule.id, updatePlacedModule]);

  const widthResetPayload = React.useMemo(() => {
    if (!shouldResetWidth) return null;
    return {
      adjustedWidth: undefined,
      columnSlotInfo: undefined,
      position: memoizedAdjustedPosition
    };
  }, [shouldResetWidth, memoizedAdjustedPosition]);

  React.useEffect(() => {
    if (!widthResetPayload) return;
    updatePlacedModule(placedModule.id, widthResetPayload);
  }, [widthResetPayload, placedModule.id, updatePlacedModule]);
  
  // Í≥ÑÏÇ∞Îêú Í∞íÎì§ÏùÑ ÏÉÅÌÉúÎ°ú ÏóÖÎç∞Ïù¥Ìä∏ - Í∞íÏù¥ Ïã§Ï†úÎ°ú Î≥ÄÍ≤ΩÎê† ÎïåÎßå ÏóÖÎç∞Ïù¥Ìä∏
  React.useEffect(() => {
    setCalculatedValues(prev => {
      // Í∞íÏù¥ Ïã§Ï†úÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÎäîÏßÄ ÌôïÏù∏
      const hasChanged = 
        prev.isColumnCFront !== isColumnCFront ||
        prev.slotInfoColumn !== slotInfo?.column ||
        prev.indexingColumnWidth !== indexing.columnWidth ||
        prev.adjustedPosition?.x !== memoizedAdjustedPosition.x ||
        prev.adjustedPosition?.y !== memoizedAdjustedPosition.y ||
        prev.adjustedPosition?.z !== memoizedAdjustedPosition.z ||
        prev.actualModuleData?.id !== actualModuleData?.id;
      
      if (!hasChanged) {
        return prev; // Î≥ÄÍ≤Ω ÏóÜÏúºÎ©¥ Ïù¥Ï†Ñ Í∞í Ïú†ÏßÄ (Î¶¨Î†åÎçîÎßÅ Î∞©ÏßÄ)
      }
      
      return {
        isColumnCFront,
        slotInfoColumn: slotInfo?.column,
        indexingColumnWidth: indexing.columnWidth,
        adjustedPosition: memoizedAdjustedPosition,
        actualModuleData
      };
    });
  }, [isColumnCFront, slotInfo?.column, indexing.columnWidth, memoizedAdjustedPosition, actualModuleData]);

  // Column C Ï†ÑÏö© Ïù¥Î≤§Ìä∏ Ìï∏Îì§Îü¨ ÎûòÌïë
  const handlePointerDown = (e: ThreeEvent<PointerEvent>) => {
    if (isColumnCFront && !isDragMode) {
      // Column C Í∏∞Îë• Ïïû Í∞ÄÍµ¨Îäî Î¶¨ÏÇ¨Ïù¥Ï¶à Î™®Îìú
      columnCResize.handlePointerDown(e);
    } else {
      // ÏùºÎ∞ò Í∞ÄÍµ¨Îäî ÎìúÎûòÍ∑∏ Î™®Îìú
      onPointerDown(e, placedModule.id);
    }
  };

  const handlePointerMove = (e: ThreeEvent<PointerEvent>) => {
    if (columnCResize.isResizing) {
      columnCResize.handlePointerMove(e);
    } else {
      onPointerMove(e);
    }
  };

  const handlePointerUp = () => {
    if (columnCResize.isResizing) {
      columnCResize.handlePointerUp();
    } else {
      onPointerUp();
    }
  };

  // ÏúÑÏπò Î≥ÄÍ≤Ω Î°úÍπÖÏùÄ Ïù¥ÎØ∏ ÏÉÅÎã®ÏóêÏÑú Ï≤òÎ¶¨Îê®

  // üî¥üî¥üî¥ ÏµúÏ¢Ö Y ÏúÑÏπò ÌôïÏù∏
  const finalYPosition = adjustedPosition.y;
  
  if (isUpperCabinet) {
    }

  // Î™®Îìà Îç∞Ïù¥ÌÑ∞Îäî Ïù¥ÎØ∏ line 458ÏóêÏÑú Ï≤¥ÌÅ¨ÌñàÏúºÎØÄÎ°ú Ïó¨Í∏∞ÏÑúÎäî Ï≤¥ÌÅ¨ÌïòÏßÄ ÏïäÏùå
  // Ïù¥Í≥≥ÏóêÏÑú early returnÌïòÎ©¥ React Hooks ÏóêÎü¨ Î∞úÏÉù
  
  // moduleDataÍ∞Ä ÏóÜÏúºÎ©¥ Îπà Í∑∏Î£π Î∞òÌôò
  // ÎìÄÏñº Í∞ÄÍµ¨Ïùò Ïä¨Î°Ø ÎÑàÎπÑ Í≥ÑÏÇ∞ (useMemoÎ°ú ÏµúÏ†ÅÌôî)
  const calculatedSlotWidths = React.useMemo(() => {
    if (!isDualFurniture || needsEndPanelAdjustment) {
      return undefined;
    }

    if (spaceInfo.droppedCeiling?.enabled && placedModule.zone && zoneSlotInfo) {
      const targetZone = placedModule.zone === 'dropped' && zoneSlotInfo.dropped ? zoneSlotInfo.dropped : zoneSlotInfo.normal;
      if (targetZone?.slotWidths) {
        const localIndex = localSlotIndex ?? placedModule.slotIndex;
        if (localIndex !== undefined && localIndex >= 0 && localIndex < targetZone.slotWidths.length - 1) {
          return [targetZone.slotWidths[localIndex], targetZone.slotWidths[localIndex + 1]];
        }
      }
    }

    if (indexing.slotWidths && normalizedSlotIndex !== undefined && normalizedSlotIndex < indexing.slotWidths.length - 1) {
      return [indexing.slotWidths[normalizedSlotIndex], indexing.slotWidths[normalizedSlotIndex + 1]];
    }

    return undefined;
  }, [isDualFurniture, needsEndPanelAdjustment, placedModule.zone, localSlotIndex, normalizedSlotIndex,
      spaceInfo.droppedCeiling?.enabled, zoneSlotInfo, indexing.slotWidths]);

  // moduleDataÍ∞Ä ÏóÜÏúºÎ©¥ Îπà Í∑∏Î£π Î∞òÌôò (Î™®Îì† Hook Ìò∏Ï∂ú Ïù¥ÌõÑ)
  if (moduleNotFound || !moduleData) {
    return <group />;
  }

  return (
    <group userData={{ furnitureId: placedModule.id }}>
      {/* Í∞ÄÍµ¨ Î≥∏Ï≤¥ (Í∏∞Îë•Ïóê ÏùòÌï¥ Î∞ÄÎ†§ÎÇ† Ïàò ÏûàÏùå) */}
      <group
        userData={{ furnitureId: placedModule.id, type: 'furniture-body' }}
        position={[
          adjustedPosition.x + positionAdjustmentForEndPanel,
          finalYPosition, // ÏÉÅÎ∂ÄÏû•ÏùÄ Í∞ïÏ†úÎ°ú 14, ÎÇòÎ®∏ÏßÄÎäî adjustedPosition.y
          furnitureZ // Í≥µÍ∞Ñ ÏïûÎ©¥ÏóêÏÑú Îí§Ï™ΩÏúºÎ°ú Î∞∞Ïπò
        ]}
        rotation={[0, (placedModule.rotation * Math.PI) / 180, 0]}
        onDoubleClick={(e) => onDoubleClick(e, placedModule.id)}
        onPointerDown={handlePointerDown}
        onPointerMove={handlePointerMove}
        onPointerUp={handlePointerUp}
        onPointerOver={() => {
          if (isColumnCFront && !isDragMode) {
            document.body.style.cursor = columnCResize.isResizing ? 'crosshair' : 'move';
          } else {
            document.body.style.cursor = isDragMode ? 'grab' : (isDraggingThis ? 'grabbing' : 'grab');
          }
          setIsHovered(true);
        }}
        onPointerOut={() => {
          if (!columnCResize.isResizing) {
            document.body.style.cursor = 'default';
          }
          setIsHovered(false);
        }}
      >
        {isSelected && width > 0 && height > 0 && depth > 0 && (
          <>
            {/* Î∞úÍ¥ë Ìö®Í≥ºÎ•º ÏúÑÌïú Ïô∏Î∂Ä Î©îÏâ¨ */}
            <mesh
              position={[0, 0, 0]}
              renderOrder={998}
            >
              <boxGeometry args={[width + highlightPadding * 3, height + highlightPadding * 3, depth + highlightPadding * 3]} />
              <meshBasicMaterial
                color={selectionHighlightColor}
                transparent
                opacity={0.1}
                depthWrite={false}
                side={THREE.BackSide}
                blending={THREE.AdditiveBlending}
              />
            </mesh>
            
            {/* Î©îÏù∏ ÌïòÏù¥ÎùºÏù¥Ìä∏ Î∞ïÏä§ÏôÄ Ïó£ÏßÄ */}
            <mesh
              ref={highlightMeshRef}
              position={[0, 0, 0]}
              renderOrder={999}
              userData={{ decoration: 'selection-highlight', furnitureId: placedModule.id }}
            >
              <boxGeometry args={[width, height, depth]} />
              <meshBasicMaterial
                color={selectionHighlightColor}
                transparent
                opacity={0.05}
                depthWrite={false}
                depthTest={true}
                toneMapped={false}
              />
              {/* Î™®Îì† Ïó£ÏßÄ ÎùºÏù∏ Í∞ïÏ°∞ */}
              <Edges
                color={selectionHighlightColor}
                scale={1.0}
                threshold={15}
                linewidth={3}
              />
            </mesh>
            
            {/* Ïô∏Í≥Ω Ïó£ÏßÄ ÎùºÏù∏ (Îçî ÌÅ¨Í≤å) */}
            <Box args={[width + 0.005, height + 0.005, depth + 0.005]}>
              <meshBasicMaterial
                transparent
                opacity={0}
                depthWrite={false}
              />
              <Edges
                color={selectionHighlightColor}
                scale={1.0}
                threshold={15}
                linewidth={2}
              />
            </Box>
          </>
        )}
        {/* ÎÖ∏ÏÑúÎùºÏö¥Îìú Î™®ÎìúÏóêÏÑú Í∞ÄÍµ¨ ÏúÑÏπò ÎîîÎ≤ÑÍπÖ */}
        {spaceInfo.surroundType === 'no-surround' && spaceInfo.gapConfig && (() => {
          return null;
        })()}

        {/* Í∞ÄÍµ¨ ÌÉÄÏûÖÏóê Îî∞Îùº Îã§Î•∏ Ïª¥Ìè¨ÎÑåÌä∏ Î†åÎçîÎßÅ */}
        {moduleData.type === 'box' ? (
          // Î∞ïÏä§Ìòï Í∞ÄÍµ¨ Î†åÎçîÎßÅ (ÎèÑÏñ¥ Ï†úÏô∏)
          <>
            {(() => {
              // ÎìÄÏñº Í∞ÄÍµ¨Ïù¥Í≥† Ï∏°Î©¥Î∑∞Ïù∏ Í≤ΩÏö∞, ÌëúÏãúÌï† ÏÑπÏÖò Í≥ÑÏÇ∞
              let visibleSectionIndex: number | null = null;
              if (
                placedModule.isDualSlot &&
                (view2DDirection === 'left' || view2DDirection === 'right') &&
                normalizedSlotIndex !== undefined
              ) {
                if (selectedSlotIndex !== null) {
                  // Ïä¨Î°ØÏù¥ ÏÑ†ÌÉùÎêú Í≤ΩÏö∞: ÏÑ†ÌÉùÎêú Ïä¨Î°ØÏóê Îî∞Îùº ÏÑπÏÖò ÌëúÏãú
                  if (normalizedSlotIndex === selectedSlotIndex) {
                    // Ï≤´ Î≤àÏß∏ Ïä¨Î°Ø ÏÑ†ÌÉù ‚Üí Ï¢åÏ∏° ÏÑπÏÖò (Ïù∏Îç±Ïä§ 0)
                    visibleSectionIndex = 0;
                  } else if (normalizedSlotIndex + 1 === selectedSlotIndex) {
                    // Îëê Î≤àÏß∏ Ïä¨Î°Ø ÏÑ†ÌÉù ‚Üí Ïö∞Ï∏° ÏÑπÏÖò (Ïù∏Îç±Ïä§ 1)
                    visibleSectionIndex = 1;
                  }
                } else {
                  // Ïä¨Î°ØÏù¥ ÏÑ†ÌÉùÎêòÏßÄ ÏïäÏùÄ Í≤ΩÏö∞: view2DDirectionÏóê Îî∞Îùº ÏûêÎèô ÏÑ†ÌÉù
                  if (view2DDirection === 'left') {
                    // Ï¢åÏ∏°Î∑∞ ‚Üí Ï≤´ Î≤àÏß∏ Ïä¨Î°Ø (Ï¢åÏ∏° ÏÑπÏÖò)
                    visibleSectionIndex = 0;
                  } else if (view2DDirection === 'right') {
                    // Ïö∞Ï∏°Î∑∞ ‚Üí Îëê Î≤àÏß∏ Ïä¨Î°Ø (Ïö∞Ï∏° ÏÑπÏÖò)
                    visibleSectionIndex = 1;
                  }
                }
              }

              console.log('üîç FurnitureItem - visibleSectionIndex Í≥ÑÏÇ∞:', {
                isDualSlot: placedModule.isDualSlot,
                view2DDirection,
                selectedSlotIndex,
                slotIndex: normalizedSlotIndex,
                visibleSectionIndex,
                furnitureId: placedModule.id
              });

              return (
                <BoxModule
                  moduleData={actualModuleData}
                  isDragging={isDraggingThis} // Ïã§Ï†úÎ°ú Ïù¥ Í∞ÄÍµ¨Î•º ÎìúÎûòÍ∑∏ÌïòÎäî Í≤ΩÏö∞Îßå true
                  color={furnitureColor}
                  internalHeight={furnitureHeightMm}
                  viewMode={viewMode}
                  renderMode={renderMode}
                  hasDoor={(slotInfo && slotInfo.hasColumn && (slotInfo.columnType === 'deep' || (placedModule.adjustedWidth !== undefined && placedModule.adjustedWidth !== null))) || needsEndPanelAdjustment
                    ? false // Í∏∞Îë• A(deep) ÎòêÎäî adjustedWidthÍ∞Ä ÏûàÎäî Í≤ΩÏö∞ ÎòêÎäî ÏóîÎìúÌå®ÎÑê Ï°∞Ï†ïÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÎèÑÏñ¥Îäî Î≥ÑÎèÑ Î†åÎçîÎßÅ
                    : (placedModule.hasDoor ?? false)}
                  customDepth={actualDepthMm}
                  hingePosition={optimalHingePosition}
                  spaceInfo={zoneSpaceInfo}
                  doorWidth={originalSlotWidthMm + doorWidthExpansion} // ÎèÑÏñ¥ ÎÑàÎπÑÏóê ÌôïÏû•Î∂Ñ Ï∂îÍ∞Ä
                  originalSlotWidth={originalSlotWidthMm}
                  slotCenterX={doorXOffset} // ÎèÑÏñ¥ ÏúÑÏπò Ïò§ÌîÑÏÖã Ï†ÅÏö©
                  adjustedWidth={furnitureWidthMm} // Ï°∞Ï†ïÎêú ÎÑàÎπÑÎ•º adjustedWidthÎ°ú Ï†ÑÎã¨
                  slotIndex={normalizedSlotIndex} // Ïä¨Î°Ø Ïù∏Îç±Ïä§ Ï†ÑÎã¨
                  slotInfo={slotInfo} // Ïä¨Î°Ø Ï†ïÎ≥¥ Ï†ÑÎã¨ (Í∏∞Îë• Ïπ®Î≤î Ïó¨Î∂Ä Ìè¨Ìï®)
                  slotWidths={calculatedSlotWidths}
                  isHighlighted={isSelected} // ÏÑ†ÌÉù ÏÉÅÌÉú Ï†ÑÎã¨
                  placedFurnitureId={placedModule.id} // Î∞∞ÏπòÎêú Í∞ÄÍµ¨ ID Ï†ÑÎã¨ (ÏπòÏàò Ìé∏ÏßëÏö©)
                  customSections={placedModule.customSections} // ÏÇ¨Ïö©Ïûê Ï†ïÏùò ÏÑπÏÖò ÏÑ§Ï†ï
                  showFurniture={showFurniture} // Í∞ÄÍµ¨ Î≥∏Ï≤¥ ÌëúÏãú Ïó¨Î∂Ä
                  visibleSectionIndex={visibleSectionIndex} // ÎìÄÏñº Í∞ÄÍµ¨ ÏÑπÏÖò ÌïÑÌÑ∞ÎßÅ
                  doorTopGap={placedModule.doorTopGap} // Ï≤úÏû•ÏóêÏÑú ÎèÑÏñ¥ ÏÉÅÎã®ÍπåÏßÄÏùò Í∞≠
                  doorBottomGap={placedModule.doorBottomGap} // Î∞îÎã•ÏóêÏÑú ÎèÑÏñ¥ ÌïòÎã®ÍπåÏßÄÏùò Í∞≠
                  lowerSectionDepth={placedModule.lowerSectionDepth} // ÌïòÎ∂Ä ÏÑπÏÖò ÍπäÏù¥ (mm)
                  upperSectionDepth={placedModule.upperSectionDepth} // ÏÉÅÎ∂Ä ÏÑπÏÖò ÍπäÏù¥ (mm)
                  doorSplit={placedModule.doorSplit}
                  upperDoorTopGap={placedModule.upperDoorTopGap}
                  upperDoorBottomGap={placedModule.upperDoorBottomGap}
                  lowerDoorTopGap={placedModule.lowerDoorTopGap}
                  lowerDoorBottomGap={placedModule.lowerDoorBottomGap}
                  grainDirection={placedModule.grainDirection} // ÌÖçÏä§Ï≤ò Í≤∞ Î∞©Ìñ• (ÌïòÏúÑ Ìò∏ÌôòÏÑ±)
                  panelGrainDirections={(() => {
                    console.log('üö® FurnitureItem - placedModule Ï≤¥ÌÅ¨:', {
                      id: placedModule.id,
                      hasPanelGrainDirections: !!placedModule.panelGrainDirections,
                      panelGrainDirections: placedModule.panelGrainDirections,
                      panelGrainDirectionsType: typeof placedModule.panelGrainDirections,
                      panelGrainDirectionsKeys: placedModule.panelGrainDirections ? Object.keys(placedModule.panelGrainDirections) : []
                    });
                    return placedModule.panelGrainDirections;
                  })()} // Ìå®ÎÑêÎ≥Ñ Í∞úÎ≥Ñ Í≤∞ Î∞©Ìñ•
                />
              );
            })()}
            
            {/* Í∞ÄÍµ¨ ÎÑàÎπÑ ÎîîÎ≤ÑÍπÖ */}
              {(() => {
              const slotWidthMm = (() => {
                if (placedModule.zone && spaceInfo.droppedCeiling?.enabled && indexing.zones) {
                  const targetZone = placedModule.zone === 'dropped' && indexing.zones.dropped ? indexing.zones.dropped : indexing.zones.normal;
                  const zoneIndex = localSlotIndex ?? placedModule.slotIndex;
                  if (zoneIndex !== undefined) {
                    return targetZone.slotWidths?.[zoneIndex] || targetZone.columnWidth;
                  }
                  return targetZone.columnWidth;
                }
                if (normalizedSlotIndex !== undefined) {
                  return indexing.slotWidths?.[normalizedSlotIndex] || indexing.columnWidth;
                }
                return indexing.columnWidth;
              })();
              
              const expectedThreeUnits = mmToThreeUnits(slotWidthMm);
              const actualThreeUnits = mmToThreeUnits(furnitureWidthMm);
              
              return null;
            })()}
          </>
        ) : (
          // Í∏∞Î≥∏ Í∞ÄÍµ¨ (Îã®Ïàú Box) Î†åÎçîÎßÅ
          <>
            <Box 
              args={[width, height, depth]}
            >
              <meshPhysicalMaterial 
                color={furnitureColor}
                clearcoat={0.1}
                clearcoatRoughness={0.8}
                metalness={0.0}
                roughness={0.7}
                reflectivity={0.2}
                transparent={isDraggingThis || isEditMode}
                opacity={isDraggingThis || isEditMode ? 0.8 : 1.0}
              />
            </Box>
            <Edges 
              color={columnCResize.isResizing ? '#ff6600' : getEdgeColor({
                isDragging: isDraggingThis,
                isEditMode,
                isDragMode,
                viewMode,
                view2DTheme,
                renderMode
              })} 
              threshold={1} 
              scale={1.001}
              linewidth={columnCResize.isResizing ? 3 : 1}
            />
            
            {/* Ìé∏Ïßë Î™®ÎìúÏùº Îïå ÏïàÎÇ¥ ÌÖçÏä§Ìä∏ */}
            {isEditMode && (
              <primitive 
                object={(() => {
                  const canvas = document.createElement('canvas');
                  const context = canvas.getContext('2d')!;
                  canvas.width = 256;
                  canvas.height = 128;
                  context.fillStyle = 'rgba(255, 140, 0, 0.9)';
                  context.fillRect(0, 0, 256, 128);
                  context.fillStyle = '#ffffff';
                  context.font = '16px Arial';
                  context.textAlign = 'center';
                  context.fillText('Ìé∏Ïßë Î™®Îìú', 128, 25);
                  context.font = '12px Arial';
                  context.fillText('ÎçîÎ∏îÌÅ¥Î¶≠ÏúºÎ°ú ÏßÑÏûÖ', 128, 40);
                  context.fillText('ÎìúÎûòÍ∑∏: Ïù¥Îèô', 128, 55);
                  context.fillText('‚Üê‚Üí: Ïù¥Îèô', 128, 70);
                  context.fillText('Del: ÏÇ≠Ï†ú', 128, 85);
                  context.fillText('Esc: Ìï¥Ï†ú', 128, 100);
                  
                  const texture = new THREE.CanvasTexture(canvas);
                  const material = new THREE.MeshBasicMaterial({ 
                    map: texture, 
                    transparent: true,
                    depthTest: false
                  });
                  const geometry = new THREE.PlaneGeometry(3, 1.5);
                  const mesh = new THREE.Mesh(geometry, material);
                  mesh.position.set(0, height + 2, 0);
                  mesh.renderOrder = 1002;
                  return mesh;
                })()}
              />
            )}
          </>
        )}
        
        {/* Column C Í∏∞Îë• Ïïû Í∞ÄÍµ¨ Î¶¨ÏÇ¨Ïù¥Ï¶à ÏïàÎÇ¥ ÌëúÏãú */}
        {isColumnCFront && isHovered && !isDragMode && !columnCResize.isResizing && (
          <Html
            position={[0, height/2 + 0.5, depth/2 + 0.1]}
            center
            occlude={false}  // Î©îÏâ¨Ïóê Í∞ÄÎ†§ÏßÄÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï
            style={{
              userSelect: 'none',
              pointerEvents: 'none',
              zIndex: 10000  // zIndexÎèÑ Îçî ÎÜíÍ≤å ÏÑ§Ï†ï
            }}
          >
            <div
              style={{
                background: 'rgba(255, 102, 0, 0.9)',
                color: 'white',
                padding: '6px 12px',
                borderRadius: '4px',
                fontSize: '12px',
                fontWeight: 'bold',
                whiteSpace: 'nowrap',
                boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
              }}
            >
              ‚ÜîÔ∏è ÎìúÎûòÍ∑∏ÌïòÏó¨ ÌÅ¨Í∏∞ Ï°∞Ï†à
            </div>
          </Html>
        )}
        
        {/* Column C Î¶¨ÏÇ¨Ïù¥Ï¶à Î∞©Ìñ• ÌëúÏãú */}
        {columnCResize.isResizing && columnCResize.resizeDirection && (
          <Html
            position={[0, 0, depth/2 + 0.1]}
            center
            occlude={false}  // Î©îÏâ¨Ïóê Í∞ÄÎ†§ÏßÄÏßÄ ÏïäÎèÑÎ°ù ÏÑ§Ï†ï
            style={{
              userSelect: 'none',
              pointerEvents: 'none',
              zIndex: 10000  // zIndexÎèÑ Îçî ÎÜíÍ≤å ÏÑ§Ï†ï
            }}
          >
            <div
              style={{
                background: 'rgba(255, 102, 0, 0.9)',
                color: 'white',
                padding: '6px 12px',
                borderRadius: '4px',
                fontSize: '14px',
                fontWeight: 'bold',
                whiteSpace: 'nowrap',
                boxShadow: '0 2px 4px rgba(0,0,0,0.2)'
              }}
            >
              {columnCResize.resizeDirection === 'horizontal' ? '‚ÜîÔ∏è ÎÑàÎπÑ Ï°∞Ï†à' : '‚ÜïÔ∏è ÍπäÏù¥ Ï°∞Ï†à'}
            </div>
          </Html>
        )}
        
      </group>

      {/* Í∏∞Îë• Ïπ®Î≤î Ïãú ÎòêÎäî ÏóîÎìúÌå®ÎÑê Ï°∞Ï†ïÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ ÎèÑÏñ¥Î•º Î≥ÑÎèÑÎ°ú Î†åÎçîÎßÅ (ÏõêÎûò Ïä¨Î°Ø ÏúÑÏπòÏóê Í≥†Ï†ï) */}
      {/* Í∏∞Îë• A (deep ÌÉÄÏûÖ) ÎòêÎäî Í∏∞Îë•Ïù¥ ÏûàÍ≥† adjustedWidthÍ∞Ä ÏÑ§Ï†ïÎêú Í≤ΩÏö∞ ÎòêÎäî ÏóîÎìúÌå®ÎÑê Ï°∞Ï†ïÏù¥ ÌïÑÏöîÌïú Í≤ΩÏö∞ Ïª§Î≤ÑÎèÑÏñ¥ Î†åÎçîÎßÅ */}
      {(placedModule.hasDoor ?? false) && 
       ((slotInfo && slotInfo.hasColumn && slotInfo.columnType === 'deep') || 
        (slotInfo && slotInfo.hasColumn && placedModule.adjustedWidth !== undefined && placedModule.adjustedWidth !== null) ||
        needsEndPanelAdjustment) && 
       spaceInfo && (() => {
        return true;
      })() && (
        <group
          userData={{ furnitureId: placedModule.id, type: 'cover-door' }}
          position={[
            originalSlotCenterX + doorXOffset, // ÎèÑÏñ¥ Ï§ëÏã¨Ïóê Ïò§ÌîÑÏÖã Ï†ÅÏö©
            finalYPosition, // ÏÉÅÎ∂ÄÏû•ÏùÄ 14, ÎÇòÎ®∏ÏßÄÎäî adjustedPosition.y
            furnitureZ // Îã§Î•∏ ÎèÑÏñ¥Îì§Í≥º ÎèôÏùºÌïú zÏ∂ï ÏúÑÏπò
          ]}
          rotation={[0, (placedModule.rotation * Math.PI) / 180, 0]}
        >
          <DoorModule
            moduleWidth={doorWidth}
            moduleDepth={actualModuleData?.dimensions.depth || 0}
            hingePosition={optimalHingePosition}
            spaceInfo={spaceInfo}
            color={isDraggingThis ? '#ff6600' : actualModuleData?.category === 'full' ? undefined : spaceInfo.materialConfig?.doorColor}
            textureUrl={spaceInfo.materialConfig?.doorTexture}
            originalSlotWidth={originalSlotWidthForDoor}
            slotCenterX={doorXOffset}
            moduleData={actualModuleData}
            isDragging={isDraggingThis}
            isEditMode={isEditMode}
            slotWidths={(() => {
              if (placedModule.zone === 'dropped' && zoneSlotInfo?.dropped) {
                const targetZone = zoneSlotInfo.dropped;
                const zoneIndex = localSlotIndex ?? placedModule.slotIndex;
                if (zoneIndex !== undefined && targetZone.slotWidths && zoneIndex < targetZone.slotWidths.length - 1) {
                  return [targetZone.slotWidths[zoneIndex], targetZone.slotWidths[zoneIndex + 1]];
                }
              } else if (indexing.slotWidths && normalizedSlotIndex !== undefined && normalizedSlotIndex < indexing.slotWidths.length - 1) {
                return [indexing.slotWidths[normalizedSlotIndex], indexing.slotWidths[normalizedSlotIndex + 1]];
              }
              return undefined;
            })()}
          />
        </group>
      )}

      {/* ÌÇ§ÌÅ∞Ïû•/ÎìÄÏñº Ï∫êÎπÑÎÑ∑ ÏòÜÏóê ÏÉÅÌïòÎ∂ÄÏû•Ïù¥ ÏûàÏùÑ Îïå ÏóîÎìúÌå®ÎÑê Î†åÎçîÎßÅ */}
      {/* Îã®, Îã§ÏùåÏùò Í≤ΩÏö∞Îäî Ï†úÏô∏:
          1. Î≤Ω ÏóÜÎäî Íµ¨Í∞ÑÏóê ÏûàÎäî Í≤ΩÏö∞ (Í∏∞Ï°¥ Î°úÏßÅ)
          2. ÎÖ∏ÏÑúÎùºÏö¥Îìú Î≤ΩÏóÜÏùå Ï≤´/ÎßàÏßÄÎßâ Ïä¨Î°Ø (ÎÖ∏ÏÑúÎùºÏö¥ÎìúÏö© ÏóîÎìúÌå®ÎÑêÏù¥ Î≥ÑÎèÑÎ°ú Î†åÎçîÎßÅÎê®) */}
      {(() => {
        // ÏóîÎìúÌå®ÎÑê Î†åÎçîÎßÅ Ïó¨Î∂Ä ÎîîÎ≤ÑÍπÖ
        if (actualModuleData?.category === 'full' && !needsEndPanelAdjustment) {
          }
        return null;
      })()}
      {needsEndPanelAdjustment && endPanelSide && !isNoSurroundFirstSlot && !isNoSurroundLastSlot && !isNoSurroundDualLastSlot && (() => {
        // ÏóîÎìúÌå®ÎÑê ÏúÑÏπò Í≥ÑÏÇ∞
        const endPanelWidth = mmToThreeUnits(END_PANEL_THICKNESS);
        const endPanelHeight = height; // Í∞ÄÍµ¨ÏôÄ ÎèôÏùºÌïú ÎÜíÏù¥
        const endPanelDepth = depth; // Í∞ÄÍµ¨ÏôÄ ÎèôÏùºÌïú ÍπäÏù¥

        // ÏóîÎìúÌå®ÎÑê X ÏúÑÏπò Í≥ÑÏÇ∞ (Í∞ÄÍµ¨Ïùò Ï§ÑÏñ¥Îì† ÎÑàÎπÑ Í≥†Î†§)
        const adjustedHalfWidth = width / 2; // Ïù¥ÎØ∏ Ï§ÑÏñ¥Îì† ÎÑàÎπÑÏùò Ï†àÎ∞ò
        const endPanelXPositions = [];

        const furnitureCenterX = adjustedPosition.x + positionAdjustmentForEndPanel;

        if (endPanelSide === 'left' || endPanelSide === 'both') {
          const leftPanelX = (isNoSurroundFirstSlot || isNoSurroundLastSlot || isNoSurroundDualLastSlot)
            ? furnitureCenterX - adjustedHalfWidth - endPanelWidth / 2
            : (slotBoundaries
                ? slotBoundaries.left + endPanelWidth / 2
                : furnitureCenterX - adjustedHalfWidth - endPanelWidth / 2);

          endPanelXPositions.push({
            x: leftPanelX,
            side: 'left'
          });
        }
        if (endPanelSide === 'right' || endPanelSide === 'both') {
          const rightPanelX = (isNoSurroundFirstSlot || isNoSurroundLastSlot || isNoSurroundDualLastSlot)
            ? furnitureCenterX + adjustedHalfWidth + endPanelWidth / 2
            : (slotBoundaries
                ? slotBoundaries.right - endPanelWidth / 2
                : furnitureCenterX + adjustedHalfWidth + endPanelWidth / 2);

          endPanelXPositions.push({
            x: rightPanelX,
            side: 'right'
          });
        }
        
        return (
          <>
            {endPanelXPositions.map((panel, index) => (
              <group
                key={`endpanel-group-${placedModule.id}-${panel.side}-${index}`}
                position={[panel.x, finalYPosition, furnitureZ]}
              >
                <EndPanelWithTexture
                  width={endPanelWidth}
                  height={endPanelHeight}
                  depth={endPanelDepth}
                  position={[0, 0, 0]}
                  spaceInfo={zoneSpaceInfo}
                  renderMode={renderMode}
                />
              </group>
            ))}
          </>
        );
      })()}

      {/* ÎèÑÏñ¥Îäî BoxModule ÎÇ¥Î∂ÄÏóêÏÑú Î†åÎçîÎßÅÌïòÎèÑÎ°ù Î≥ÄÍ≤Ω */}
      
      {/* 3D Î™®ÎìúÏóêÏÑú Ìé∏Ïßë ÏïÑÏù¥ÏΩò ÌëúÏãú - showDimensionsÍ∞Ä trueÏù¥Í≥† 3D Î™®ÎìúÏùº ÎïåÎßå ÌëúÏãú */}
      {showDimensions && viewMode === '3D' && (
        <Html
          position={[
            adjustedPosition.x + positionAdjustmentForEndPanel,
            finalYPosition - height / 2 - 2.0, // ÌïòÎ∂Ä ÌîÑÎ†àÏûÑÎ≥¥Îã§ Îçî ÏïÑÎûòÎ°ú (1.0 -> 2.0)
            furnitureZ + depth / 2 + 0.5 // Í∞ÄÍµ¨ ÏïûÏ™Ω
          ]}
          center
          style={{
            userSelect: 'none',
            pointerEvents: 'auto',
            zIndex: 100,
            background: 'transparent'
          }}
        >
          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', gap: '8px' }}>
            <div
              style={{
                cursor: 'pointer',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                width: '32px',
                height: '32px',
                border: `2px solid ${getThemeColor()}`,
                borderRadius: '50%',
                backgroundColor: '#ffffff',
                transition: 'all 0.2s ease',
                opacity: isHovered ? 1 : 0.8,
                transform: isHovered ? 'scale(1.1)' : 'scale(1)',
                boxShadow: '0 2px 4px rgba(0, 0, 0, 0.1)'
              }}
              onClick={(e) => {
                e.stopPropagation();
                // Ïù¥ÎØ∏ Ìé∏Ïßë Î™®ÎìúÎùºÎ©¥ ÌåùÏóÖ Îã´Í∏∞
                if (isEditMode) {
                  const closeAllPopups = useUIStore.getState().closeAllPopups;
                  closeAllPopups();
                } else {
                  // Ìé∏Ïßë Î™®ÎìúÍ∞Ä ÏïÑÎãàÎ©¥ ÌåùÏóÖ Ïó¥Í∏∞
                  onDoubleClick(e as any, placedModule.id);
                }
              }}
              onPointerDown={(e) => e.stopPropagation()}
              onMouseEnter={() => setIsHovered(true)}
              onMouseLeave={() => setIsHovered(false)}
              title="Í∞ÄÍµ¨ ÏÜçÏÑ± Ìé∏Ïßë"
            >
              <EditIcon color={getThemeColor()} size={18} />
            </div>
          </div>
        </Html>
      )}
    </group>
  );
};

export default FurnitureItem; 
