/**
 * Template System Type Definitions
 * 
 * These types define the data structures for the template system across all layers.
 * Following clean architecture principles with clear separation between layers.
 */

import { Timestamp } from 'firebase/firestore';
import { SpaceInfo } from '@/store/core/spaceConfigStore';
import { PlacedModule } from '@/editor/shared/furniture/types';

// ============= Domain Models (Core Business Logic) =============

/**
 * Core template domain model
 * This represents the essential template data independent of storage mechanism
 */
export interface Template {
  id: string;
  name: string;
  description?: string;
  thumbnail?: string; // Base64 or URL
  spaceConfig: SpaceInfo;
  furniture: PlacedModule[];
  metadata: TemplateMetadata;
}

/**
 * Template metadata for tracking and categorization
 */
export interface TemplateMetadata {
  category?: TemplateCategory;
  tags?: string[];
  usageCount: number;
  isPublic: boolean;
  createdBy: string;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * Template categories for organization
 */
export enum TemplateCategory {
  LIVING_ROOM = 'living_room',
  BEDROOM = 'bedroom',
  KITCHEN = 'kitchen',
  OFFICE = 'office',
  BATHROOM = 'bathroom',
  CUSTOM = 'custom'
}

// ============= DTOs (Data Transfer Objects) =============

/**
 * DTO for creating a new template
 * Used when transferring data from UI to Service layer
 */
export interface CreateTemplateDTO {
  name: string;
  description?: string;
  category?: TemplateCategory;
  tags?: string[];
  isPublic?: boolean;
  thumbnail?: string; // Base64 data URL
  spaceConfig: SpaceInfo;
  furniture: PlacedModule[];
}

/**
 * DTO for updating an existing template
 */
export interface UpdateTemplateDTO {
  name?: string;
  description?: string;
  category?: TemplateCategory;
  tags?: string[];
  isPublic?: boolean;
  thumbnail?: string;
}

/**
 * DTO for template list response
 * Lightweight version for list views
 */
export interface TemplateListItemDTO {
  id: string;
  name: string;
  description?: string;
  thumbnail?: string;
  category?: TemplateCategory;
  tags?: string[];
  usageCount: number;
  isPublic: boolean;
  createdAt: Date;
  updatedAt: Date;
}

/**
 * DTO for applying a template
 */
export interface ApplyTemplateDTO {
  templateId: string;
  preserveExisting?: boolean; // Keep existing furniture when applying
  applySpace?: boolean; // Apply space configuration
  applyFurniture?: boolean; // Apply furniture placement
}

// ============= Repository Entities (Infrastructure Layer) =============

/**
 * Firebase template document structure
 * This is what actually gets stored in Firestore
 */
export interface FirebaseTemplate {
  id?: string; // Auto-generated by Firestore
  userId: string;
  teamId?: string;
  name: string;
  description?: string;
  thumbnailUrl?: string; // Storage URL
  category?: TemplateCategory;
  tags?: string[];
  usageCount: number;
  isPublic: boolean;
  
  // Embedded design data
  spaceConfig: SpaceInfo;
  furniture: {
    placedModules: PlacedModule[];
  };
  
  // Firebase timestamps
  createdAt: Timestamp;
  updatedAt: Timestamp;
  createdBy: string;
  
  // Version for future migrations
  version: string;
}

// ============= Service Layer Interfaces =============

/**
 * Template service interface
 * Defines the contract for template business logic
 */
export interface ITemplateService {
  create(dto: CreateTemplateDTO): Promise<Template>;
  list(filters?: TemplateFilters): Promise<TemplateListItemDTO[]>;
  getById(id: string): Promise<Template>;
  update(id: string, dto: UpdateTemplateDTO): Promise<Template>;
  delete(id: string): Promise<void>;
  apply(dto: ApplyTemplateDTO): Promise<void>;
  duplicate(id: string, newName: string): Promise<Template>;
}

/**
 * Filters for template queries
 */
export interface TemplateFilters {
  category?: TemplateCategory;
  tags?: string[];
  isPublic?: boolean;
  userId?: string;
  teamId?: string;
  searchTerm?: string;
  sortBy?: 'name' | 'createdAt' | 'updatedAt' | 'usageCount';
  sortOrder?: 'asc' | 'desc';
  limit?: number;
  offset?: number;
}

// ============= Repository Interfaces =============

/**
 * Template repository interface
 * Defines the contract for data access
 */
export interface ITemplateRepository {
  create(data: Omit<FirebaseTemplate, 'id'>): Promise<FirebaseTemplate>;
  findById(id: string): Promise<FirebaseTemplate | null>;
  findAll(filters?: TemplateFilters): Promise<FirebaseTemplate[]>;
  update(id: string, data: Partial<FirebaseTemplate>): Promise<void>;
  delete(id: string): Promise<void>;
  incrementUsageCount(id: string): Promise<void>;
}

/**
 * Template storage repository interface
 * Handles thumbnail storage operations
 */
export interface ITemplateStorageRepository {
  uploadThumbnail(templateId: string, dataUrl: string): Promise<string>;
  deleteThumbnail(templateId: string): Promise<void>;
  getThumbnailUrl(templateId: string): Promise<string | null>;
}

// ============= UI Layer Types =============

/**
 * Template selection event
 */
export interface TemplateSelectionEvent {
  template: Template;
  action: 'view' | 'apply' | 'edit' | 'delete' | 'duplicate';
}

/**
 * Template UI state
 */
export interface TemplateUIState {
  templates: TemplateListItemDTO[];
  selectedTemplate: Template | null;
  isLoading: boolean;
  error: string | null;
  filters: TemplateFilters;
}

// ============= Error Types =============

/**
 * Template-specific error class
 */
export class TemplateError extends Error {
  constructor(
    message: string,
    public code: TemplateErrorCode,
    public details?: any
  ) {
    super(message);
    this.name = 'TemplateError';
  }
}

/**
 * Template error codes
 */
export enum TemplateErrorCode {
  NOT_FOUND = 'TEMPLATE_NOT_FOUND',
  INVALID_DATA = 'TEMPLATE_INVALID_DATA',
  PERMISSION_DENIED = 'TEMPLATE_PERMISSION_DENIED',
  STORAGE_ERROR = 'TEMPLATE_STORAGE_ERROR',
  THUMBNAIL_ERROR = 'TEMPLATE_THUMBNAIL_ERROR',
  APPLY_ERROR = 'TEMPLATE_APPLY_ERROR',
  QUOTA_EXCEEDED = 'TEMPLATE_QUOTA_EXCEEDED'
}