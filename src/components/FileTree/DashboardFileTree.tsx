import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '@/auth/AuthProvider';
import { getUserProjects, getDesignFiles, loadFolderData, saveFolderData, deleteDesignFile, updateDesignFile } from '@/firebase/projects';
import { ProjectSummary, DesignFileSummary } from '@/firebase/types';
import SimpleProjectDropdown from '@/components/common/SimpleProjectDropdown';
import { ChevronDownIcon, ChevronRightIcon, FolderIcon, PlusIcon, ProjectIcon } from '@/components/common/Icons';
import styles from './DashboardFileTree.module.css';

interface FolderData {
  id: string;
  name: string;
  type: 'folder';
  children: {
    id: string;
    name: string;
    type: 'file' | 'design';
  }[];
  expanded: boolean;
}

interface DashboardFileTreeProps {
  onFileSelect?: (projectId: string, designFileId: string, designFileName: string) => void;
  onProjectSelect?: (projectId: string) => void;
  onCreateNew?: () => void;
  onClose?: () => void;
}

const DashboardFileTree: React.FC<DashboardFileTreeProps> = ({ onFileSelect, onProjectSelect, onClose }) => {
  const navigate = useNavigate();
  const { user } = useAuth();
  
  const [allProjects, setAllProjects] = useState<ProjectSummary[]>([]);
  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(null);
  const [selectedProject, setSelectedProject] = useState<ProjectSummary | null>(null);
  const [folders, setFolders] = useState<{ [projectId: string]: FolderData[] }>({});
  const [designFiles, setDesignFiles] = useState<{ [projectId: string]: DesignFileSummary[] }>({});
  const [expandedProjects, setExpandedProjects] = useState<Set<string>>(new Set());
  const [expandedFolders, setExpandedFolders] = useState<Set<string>>(new Set());
  const [moreMenu, setMoreMenu] = useState<{
    visible: boolean;
    x: number;
    y: number;
    itemId: string;
    itemName: string;
    itemType: 'folder' | 'design' | 'project';
  } | null>(null);
  const [isCreateFolderModalOpen, setIsCreateFolderModalOpen] = useState(false);
  const [newFolderName, setNewFolderName] = useState('');
  const [isCreatingFolder, setIsCreatingFolder] = useState(false);
  
  // Ïª¥Ìè¨ÎÑåÌä∏ ÎßàÏö¥Ìä∏ Ïãú ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadProjects = async () => {
      if (user) {
        await loadAllProjects();
        
        // URLÏóêÏÑú ÌòÑÏû¨ ÌîÑÎ°úÏ†ùÌä∏ ID Í∞ÄÏ†∏Ïò§Í∏∞
        const urlParams = new URLSearchParams(window.location.search);
        const projectId = urlParams.get('projectId');
        if (projectId) {
          setSelectedProjectId(projectId);
          // URLÏóê ÌîÑÎ°úÏ†ùÌä∏ IDÍ∞Ä ÏûàÏúºÎ©¥ ÏûêÎèôÏúºÎ°ú ÌôïÏû•
          setExpandedProjects(new Set([projectId]));
        }
      }
    };
    
    loadProjects();
  }, [user]);
  
  // ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä Î≥ÄÍ≤ΩÎê† Îïå Ìï¥Îãπ ÌîÑÎ°úÏ†ùÌä∏ Îç∞Ïù¥ÌÑ∞ Î°úÎìú
  useEffect(() => {
    const loadProjectData = async () => {
      if (selectedProjectId && allProjects.length > 0) {
        const project = allProjects.find(p => p.id === selectedProjectId);
        if (project) {
          setSelectedProject(project);
          await loadFolderDataForProject(selectedProjectId);
          await loadDesignFilesForProject(selectedProjectId);
        }
      }
    };
    
    loadProjectData();
  }, [selectedProjectId, allProjects, user]);
  
  const loadAllProjects = async () => {
    if (!user) return;
    
    try {
      const result = await getUserProjects(user.uid);
      setAllProjects(result.projects);
      
      // ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏûàÍ≥† ÏÑ†ÌÉùÎêú ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏúºÎ©¥ Ï≤´ Î≤àÏß∏ ÌîÑÎ°úÏ†ùÌä∏ ÏûêÎèô ÏÑ†ÌÉù
      if (result.projects.length > 0 && !selectedProjectId) {
        const firstProjectId = result.projects[0].id;
        setSelectedProjectId(firstProjectId);
        setSelectedProject(result.projects[0]);
        // Ï≤´ Î≤àÏß∏ ÌîÑÎ°úÏ†ùÌä∏ ÏûêÎèô ÌôïÏû•
        setExpandedProjects(new Set([firstProjectId]));
        console.log('‚úÖ Ï≤´ Î≤àÏß∏ ÌîÑÎ°úÏ†ùÌä∏ ÏûêÎèô ÏÑ†ÌÉù Î∞è ÌôïÏû•:', firstProjectId);
      }
    } catch (error) {
      console.error('ÌîÑÎ°úÏ†ùÌä∏ Î°úÎìú ÏóêÎü¨:', error);
    }
  };
  
  const loadFolderDataForProject = async (projectId: string) => {
    if (!user) return;
    
    try {
      const { folders: folderData, error } = await loadFolderData(projectId);
      if (error) {
        console.error('Ìè¥Îçî Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ ÏóêÎü¨:', error);
      } else {
        setFolders(prev => ({
          ...prev,
          [projectId]: folderData || []
        }));
      }
    } catch (err) {
      console.error('Ìè¥Îçî Îç∞Ïù¥ÌÑ∞ Î∂àÎü¨Ïò§Í∏∞ Ï§ë Ïò§Î•ò:', err);
    }
  };
  
  const loadDesignFilesForProject = async (projectId: string) => {
    if (!user) return;
    
    try {
      const result = await getDesignFiles(projectId);
      console.log('üî• ÎîîÏûêÏù∏ ÌååÏùº Î°úÎìú Í≤∞Í≥º:', {
        projectId,
        designFilesCount: result.designFiles?.length || 0,
        designFiles: result.designFiles,
        error: result.error
      });
      
      // ÎîîÏûêÏù∏ ÌååÏùºÏùÑ ÏÉÅÌÉúÏóê Ï†ÄÏû•
      if (result.designFiles && result.designFiles.length > 0) {
        setDesignFiles(prev => ({
          ...prev,
          [projectId]: result.designFiles
        }));
        console.log('‚úÖ ÎîîÏûêÏù∏ ÌååÏùº state ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
      } else {
        console.log('‚ö†Ô∏è ÎîîÏûêÏù∏ ÌååÏùºÏù¥ ÏóÜÍ±∞ÎÇò ÎπÑÏñ¥ÏûàÏùå');
        setDesignFiles(prev => ({
          ...prev,
          [projectId]: []
        }));
      }
    } catch (error) {
      console.error('ÎîîÏûêÏù∏ ÌååÏùº Î°úÎìú ÏóêÎü¨:', error);
      setDesignFiles(prev => ({
        ...prev,
        [projectId]: []
      }));
    }
  };
  
  const toggleProject = async (projectId: string) => {
    const newExpanded = new Set(expandedProjects);
    if (newExpanded.has(projectId)) {
      newExpanded.delete(projectId);
    } else {
      newExpanded.add(projectId);
      // ÌîÑÎ°úÏ†ùÌä∏Î•º ÌôïÏû•Ìï† Îïå ÏÑ†ÌÉù Î∞è Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      handleProjectSelect(projectId);
      // Ìè¥ÎçîÏôÄ ÎîîÏûêÏù∏ ÌååÏùº Îç∞Ïù¥ÌÑ∞ Î°úÎìú
      await loadFolderDataForProject(projectId);
      await loadDesignFilesForProject(projectId);
    }
    setExpandedProjects(newExpanded);
  };

  const toggleFolder = (folderId: string) => {
    const newExpanded = new Set(expandedFolders);
    if (newExpanded.has(folderId)) {
      newExpanded.delete(folderId);
    } else {
      newExpanded.add(folderId);
    }
    setExpandedFolders(newExpanded);
  };
  
  const handleProjectSelect = (projectId: string) => {
    setSelectedProjectId(projectId);
    const project = allProjects.find(p => p.id === projectId);
    if (project) {
      setSelectedProject(project);
    }
    // ÏÉÅÏúÑ Ïª¥Ìè¨ÎÑåÌä∏Î°ú ÌîÑÎ°úÏ†ùÌä∏ ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏ Ï†ÑÎã¨
    if (onProjectSelect) {
      onProjectSelect(projectId);
    }
  };
  
  const handleDesignFileClick = (projectId: string, designFileId: string, designFileName: string) => {
    console.log('üéØ handleDesignFileClick Ìò∏Ï∂úÎê®:', {
      projectId,
      designFileId,
      designFileName,
      hasOnFileSelect: !!onFileSelect
    });
    
    if (onFileSelect) {
      console.log('‚úÖ onFileSelect Ìï®Ïàò Ìò∏Ï∂ú ÏãúÏûë');
      onFileSelect(projectId, designFileId, designFileName);
    } else {
      console.log('üîÄ Í∏∞Î≥∏ ÎÑ§ÎπÑÍ≤åÏù¥ÏÖò ÎèôÏûë');
      // Í∏∞Î≥∏ ÎèôÏûë: ÏóêÎîîÌÑ∞Î°ú Ïù¥Îèô
      navigate(`/configurator?projectId=${projectId}&designFileId=${designFileId}`);
    }
    
    if (onClose) {
      console.log('üö™ ÌååÏùºÌä∏Î¶¨ Îã´Í∏∞');
      onClose();
    }
  };
  
  const handleMoreMenuOpen = (e: React.MouseEvent, itemId: string, itemName: string, itemType: 'folder' | 'design' | 'project') => {
    e.preventDefault();
    e.stopPropagation();
    setMoreMenu({
      visible: true,
      x: e.clientX,
      y: e.clientY,
      itemId,
      itemName,
      itemType
    });
  };
  
  const closeMoreMenu = () => {
    setMoreMenu(null);
  };
  
  const handleCreateFolder = () => {
    if (!selectedProjectId) return;
    setIsCreateFolderModalOpen(true);
  };
  
  const handleCreateFolderSubmit = async () => {
    if (!newFolderName.trim() || !selectedProjectId) return;
    
    setIsCreatingFolder(true);
    try {
      const folderId = `folder_${Date.now()}`;
      const newFolder: FolderData = {
        id: folderId,
        name: newFolderName.trim(),
        type: 'folder',
        children: [],
        expanded: false
      };
      
      const updatedFolders = [
        ...(folders[selectedProjectId] || []),
        newFolder
      ];
      
      setFolders(prev => ({
        ...prev,
        [selectedProjectId]: updatedFolders
      }));
      
      // FirebaseÏóê Ï†ÄÏû•
      await saveFolderData(selectedProjectId, updatedFolders);
      
      setIsCreateFolderModalOpen(false);
      setNewFolderName('');
    } catch (error) {
      console.error('Ìè¥Îçî ÏÉùÏÑ± ÏóêÎü¨:', error);
      alert('Ìè¥Îçî ÏÉùÏÑ±Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    } finally {
      setIsCreatingFolder(false);
    }
  };
  
  const handleCloseFolderModal = () => {
    setIsCreateFolderModalOpen(false);
    setNewFolderName('');
  };
  
  const handleRenameItem = async () => {
    if (!moreMenu) return;
    
    const newName = prompt(`ÏÉà Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî:`, moreMenu.itemName);
    if (!newName || newName.trim() === moreMenu.itemName) {
      closeMoreMenu();
      return;
    }
    
    try {
      if (moreMenu.itemType === 'folder' && selectedProjectId) {
        // Ìè¥Îçî Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
        const updatedFolders = folders[selectedProjectId]?.map(folder => 
          folder.id === moreMenu.itemId 
            ? { ...folder, name: newName.trim() }
            : folder
        ) || [];
        
        setFolders(prev => ({
          ...prev,
          [selectedProjectId]: updatedFolders
        }));
        
        // FirebaseÏóê Ï†ÄÏû•
        await saveFolderData(selectedProjectId, updatedFolders);
      } else if (moreMenu.itemType === 'design') {
        // ÎîîÏûêÏù∏ ÌååÏùº Ïù¥Î¶Ñ Î≥ÄÍ≤Ω
        await updateDesignFile(moreMenu.itemId, { name: newName.trim() });
        
        // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
        if (selectedProjectId) {
          await loadDesignFilesForProject(selectedProjectId);
        }
      }
    } catch (error) {
      console.error('Ïù¥Î¶Ñ Î≥ÄÍ≤Ω ÏóêÎü¨:', error);
      alert('Ïù¥Î¶Ñ Î≥ÄÍ≤ΩÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    }
    
    closeMoreMenu();
  };
  
  const handleDeleteItem = async () => {
    if (!moreMenu) return;
    
    const confirmMessage = moreMenu.itemType === 'folder' 
      ? `Ï†ïÎßêÎ°ú Ìè¥Îçî "${moreMenu.itemName}"ÏùÑ(Î•º) ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?\n\nÌè¥Îçî ÎÇ¥Ïùò Î™®Îì† ÌååÏùºÎèÑ Ìï®Íªò ÏÇ≠Ï†úÎê©ÎãàÎã§.`
      : `Ï†ïÎßêÎ°ú ÌååÏùº "${moreMenu.itemName}"ÏùÑ(Î•º) ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?`;
    
    if (window.confirm(confirmMessage)) {
      try {
        if (moreMenu.itemType === 'folder' && selectedProjectId) {
          const updatedFolders = folders[selectedProjectId]?.filter(folder => folder.id !== moreMenu.itemId) || [];
          setFolders(prev => ({
            ...prev,
            [selectedProjectId]: updatedFolders
          }));
          
          // FirebaseÏóê Ï†ÄÏû•
          await saveFolderData(selectedProjectId, updatedFolders);
        } else if (moreMenu.itemType === 'design' && selectedProjectId) {
          await deleteDesignFile(moreMenu.itemId, selectedProjectId);
          
          // Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
          await loadDesignFilesForProject(selectedProjectId);
        }
      } catch (error) {
        console.error('ÏÇ≠Ï†ú ÏóêÎü¨:', error);
        alert('ÏÇ≠Ï†úÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
      }
    }
    
    closeMoreMenu();
  };
  
  // Î£®Ìä∏ Î†àÎ≤® ÎîîÏûêÏù∏ ÌååÏùº ÌôïÏù∏ (ÎåÄÏãúÎ≥¥ÎìúÏôÄ ÎèôÏùºÌïú Î°úÏßÅ)
  const hasRootDesignFile = () => {
    if (!selectedProject || !selectedProjectId) return false;
    
    const projectFolders = folders[selectedProjectId] || [];
    const allFolderChildren = projectFolders.flatMap(folder => folder.children);
    const folderChildIds = new Set(allFolderChildren.map(child => child.id));
    const rootDesignId = `${selectedProject.id}-design`;
    const isRootDesignInFolder = folderChildIds.has(rootDesignId);
    
    return selectedProject.furnitureCount && selectedProject.furnitureCount > 0 && !isRootDesignInFolder;
  };
  
  return (
    <div className={styles.fileTree}>
      <div className={styles.treeHeader}>
        <div className={styles.projectSelectorContainer}>
          <SimpleProjectDropdown
            projects={allProjects}
            currentProject={selectedProject}
            onProjectSelect={(project) => handleProjectSelect(project.id)}
          />
        </div>
      </div>
      
      <div className={styles.treeContent}>
        {!user ? (
          <div className={styles.loginPrompt}>
            <div className={styles.loginPromptIcon}>
              <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="1.5">
                <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
                <circle cx="12" cy="7" r="4"></circle>
              </svg>
            </div>
            <p className={styles.loginPromptText}>Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§</p>
            <button 
              className={styles.loginPromptButton}
              onClick={() => navigate('/login')}
            >
              Î°úÍ∑∏Ïù∏ÌïòÍ∏∞
            </button>
          </div>
        ) : user && allProjects.length > 0 ? (
          <>
            {/* Î™®Îì† ÌîÑÎ°úÏ†ùÌä∏ Î™©Î°ù */}
            {allProjects.map(project => (
              <div key={project.id}>
                <div 
                  className={`${styles.treeItem} ${selectedProjectId === project.id ? styles.active : ''}`}
                  onClick={() => toggleProject(project.id)}
                >
                  <div className={styles.treeItemIcon}>
                    <span style={{ 
                      display: 'inline-block', 
                      width: '16px', 
                      height: '16px',
                      fontSize: '12px',
                      lineHeight: '16px',
                      textAlign: 'center',
                      color: 'var(--theme-text-secondary, #666)',
                      fontFamily: 'monospace',
                      userSelect: 'none'
                    }}>
                      {expandedProjects.has(project.id) ? '‚ñº' : '‚ñ∂'}
                    </span>
                    <ProjectIcon size={16} color="#666" />
                  </div>
                  <span>{project.title}</span>
                  <div className={styles.treeItemActions}>
                    <button 
                      className={styles.treeItemActionBtn}
                      onClick={(e) => {
                        e.stopPropagation();
                        handleMoreMenuOpen(e, project.id, project.title, 'project');
                      }}
                    >
                      ‚ãØ
                    </button>
                  </div>
                </div>
                
                {/* ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÌôïÏû•ÎêòÎ©¥ ÎîîÏûêÏù∏ ÌååÏùºÍ≥º Ìè¥Îçî ÌëúÏãú */}
                {expandedProjects.has(project.id) && (
                  <div className={styles.projectChildren}>
                    {console.log('üî• ÌîÑÎ°úÏ†ùÌä∏ ÌôïÏû•Îê®:', {
                      projectId: project.id,
                      designFiles: designFiles[project.id],
                      designFilesCount: designFiles[project.id]?.length || 0,
                      designFilesDetail: designFiles[project.id]?.map(df => ({ id: df.id, name: df.name })),
                      folders: folders[project.id]?.length || 0
                    })}
                    {/* Ìè¥ÎçîÎì§ */}
                    {(folders[project.id] || []).map(folder => (
                      <div key={folder.id}>
                        <div 
                          className={`${styles.treeItem} ${styles.childItem}`}
                          onClick={() => toggleFolder(folder.id)}
                        >
                          <div className={styles.treeItemIcon}>
                            <span style={{ 
                              display: 'inline-block', 
                              width: '14px', 
                              height: '14px',
                              fontSize: '11px',
                              lineHeight: '14px',
                              textAlign: 'center',
                              color: 'var(--theme-text-secondary, #666)',
                              fontFamily: 'monospace',
                              userSelect: 'none'
                            }}>
                              {expandedFolders.has(folder.id) ? '‚ñº' : '‚ñ∂'}
                            </span>
                            <FolderIcon size={16} color="currentColor" />
                          </div>
                          <span>{folder.name}</span>
                          <span className={styles.treeItemCount}>{folder.children.length}</span>
                          <div className={styles.treeItemActions}>
                            <button 
                              className={styles.treeItemActionBtn}
                              onClick={(e) => {
                                e.stopPropagation();
                                handleMoreMenuOpen(e, folder.id, folder.name, 'folder');
                              }}
                            >
                              ‚ãØ
                            </button>
                          </div>
                        </div>
                        
                        {/* Ìè¥Îçî ÎÇ¥ ÌååÏùºÎì§ */}
                        {expandedFolders.has(folder.id) && (
                          <div className={styles.folderChildren}>
                            {folder.children.map(child => (
                              <div 
                                key={child.id}
                                className={`${styles.treeItem} ${styles.childItem} ${styles.nestedItem}`}
                                onClick={() => handleDesignFileClick(project.id, child.id, child.name)}
                              >
                                <div className={styles.treeItemIcon}>
                                  <div className={styles.designIcon}>
                                    <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2.5">
                                      <path d="M12 19l7-7 3 3-7 7-3-3z"/>
                                      <path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"/>
                                      <path d="M2 2l7.586 7.586"/>
                                      <circle cx="11" cy="11" r="2"/>
                                    </svg>
                                  </div>
                                </div>
                                <span>{child.name}</span>
                                <div className={styles.treeItemActions}>
                                  <button 
                                    className={styles.treeItemActionBtn}
                                    onClick={(e) => {
                                      e.stopPropagation();
                                      handleMoreMenuOpen(e, child.id, child.name, 'design');
                                    }}
                                  >
                                    ‚ãØ
                                  </button>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    ))}
                    
                    {/* ÎîîÏûêÏù∏ ÌååÏùºÎì§ (Ìè¥ÎçîÏóê ÏóÜÎäî Í≤ÉÎì§) */}
                    {(designFiles[project.id] || []).map(designFile => (
                      <div 
                        key={designFile.id}
                        className={`${styles.treeItem} ${styles.childItem}`}
                        onClick={() => handleDesignFileClick(project.id, designFile.id, designFile.name)}
                      >
                        <div className={styles.treeItemIcon}>
                          <div className={styles.designIcon}>
                            <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="white" strokeWidth="2.5">
                              <path d="M12 19l7-7 3 3-7 7-3-3z"/>
                              <path d="M18 13l-1.5-7.5L2 2l3.5 14.5L13 18l5-5z"/>
                              <path d="M2 2l7.586 7.586"/>
                              <circle cx="11" cy="11" r="2"/>
                            </svg>
                          </div>
                        </div>
                        <span>{designFile.name}</span>
                        <div className={styles.treeItemActions}>
                          <button 
                            className={styles.treeItemActionBtn}
                            onClick={(e) => {
                              e.stopPropagation();
                              handleMoreMenuOpen(e, designFile.id, designFile.name, 'design');
                            }}
                          >
                            ‚ãØ
                          </button>
                        </div>
                      </div>
                    ))}
                  </div>
                )}
              </div>
            ))}
          </>
        ) : user ? (
          <div className={styles.treeItem}>
            <span style={{ color: '#999', fontSize: '14px' }}>
              ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏäµÎãàÎã§
            </span>
          </div>
        ) : (
          <div className={styles.treeItem}>
            <span style={{ color: '#999', fontSize: '14px' }}>
              Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§
            </span>
          </div>
        )}
      </div>
      
      {/* ÎçîÎ≥¥Í∏∞ Î©îÎâ¥ */}
      {moreMenu && (
        <>
          <div 
            className={styles.moreMenuBackdrop}
            onClick={closeMoreMenu}
          />
          <div
            className={styles.moreMenu}
            style={{
              position: 'fixed',
              top: moreMenu.y,
              left: moreMenu.x
            }}
          >
            <div 
              className={styles.moreMenuItem}
              onClick={handleRenameItem}
            >
              Ïù¥Î¶Ñ Î∞îÍæ∏Í∏∞
            </div>
            <div 
              className={`${styles.moreMenuItem} ${styles.deleteItem}`}
              onClick={handleDeleteItem}
            >
              ÏÇ≠Ï†úÌïòÍ∏∞
            </div>
          </div>
        </>
      )}
      
      {/* Ìè¥Îçî ÏÉùÏÑ± Î™®Îã¨ */}
      {isCreateFolderModalOpen && (
        <div className={styles.modalOverlay}>
          <div className={styles.modal}>
            <h2 className={styles.modalTitle}>ÏÉà Ìè¥Îçî ÏÉùÏÑ±</h2>
            <input
              type="text"
              value={newFolderName}
              onChange={(e) => setNewFolderName(e.target.value)}
              placeholder="Ìè¥Îçî Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî"
              className={styles.modalInput}
              onKeyPress={(e) => {
                if (e.key === 'Enter' && newFolderName.trim()) {
                  handleCreateFolderSubmit();
                }
              }}
              autoFocus
            />
            <div className={styles.modalActions}>
              <button
                onClick={handleCloseFolderModal}
                disabled={isCreatingFolder}
                className={styles.modalCancelBtn}
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleCreateFolderSubmit}
                disabled={!newFolderName.trim() || isCreatingFolder}
                className={styles.modalCreateBtn}
              >
                {isCreatingFolder ? 'ÏÉùÏÑ± Ï§ë...' : 'ÏÉùÏÑ±'}
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default DashboardFileTree;